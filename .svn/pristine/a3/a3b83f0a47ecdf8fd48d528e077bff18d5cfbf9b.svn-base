package com.athena.mis.document.actions.subcategory

import com.athena.mis.ActionIntf
import com.athena.mis.BaseService
import com.athena.mis.GridEntity
import com.athena.mis.application.entity.SysConfiguration
import com.athena.mis.document.config.DocSysConfigurationCacheUtility
import com.athena.mis.document.entity.DocCategory
import com.athena.mis.document.entity.DocSubCategory
import com.athena.mis.document.service.DocSubCategoryService
import com.athena.mis.document.utility.DocCategoryCacheUtility
import com.athena.mis.document.utility.DocSessionUtil
import com.athena.mis.document.utility.DocSubCategoryCacheUtility
import com.athena.mis.utility.Tools
import org.apache.log4j.Logger
import org.codehaus.groovy.grails.web.mapping.LinkGenerator
import org.codehaus.groovy.grails.web.servlet.mvc.GrailsParameterMap
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.transaction.annotation.Transactional

class UpdateDocSubCategoryActionService extends BaseService implements ActionIntf {
    private Logger log = Logger.getLogger(getClass())

    private static final String SUB_CATEGORY = 'subCategory'
    private static final String UPDATE_SUCCESS_MESSAGE = ' has been successfully updated'
    private static final String UPDATE_FAILURE_MESSAGE = 'Failed to saved '
    private static final String NAME_MUST_BE_UNIQUE = ' name must be unique'
    private static final String CATEGORY_MUST_BE_ACTIVE = ' must be active for this operation'
    private static final String OBJ_NOT_FOUND = " not found"
    private static final String SUB_CATEGORY_LABEL = 'subCategoryLabel'
    private static final String DEFAULT_SUB_CATEGORY_NAME = 'Sub Category'
    private static final String DEFAULT_CATEGORY_NAME = 'Category'

    DocSubCategoryService docSubCategoryService
    LinkGenerator grailsLinkGenerator

    @Autowired
    DocSessionUtil docSessionUtil
    @Autowired
    DocSysConfigurationCacheUtility docSysConfigurationCacheUtility
    @Autowired
    DocSubCategoryCacheUtility docSubCategoryCacheUtility
    @Autowired
    DocCategoryCacheUtility docCategoryCacheUtility

    /*
    * @params parameters - Serialize parameters from UI
    * @params obj - N/A
    * Sub Category Label from System configuration
    * Check for invalid input, object
    * Build new sub category
    * check for duplicate name
    * @return - A map on containing new sub category, sub category label or error messages
    * */

    @Transactional(readOnly = true)
    public Object executePreCondition(Object parameters, Object obj) {
        Map result = new LinkedHashMap()
        String subCategoryLabel = DEFAULT_SUB_CATEGORY_NAME             // default value
        String categoryLabel = DEFAULT_CATEGORY_NAME
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)

            long companyId = docSessionUtil.appSessionUtil.getCompanyId()
            SysConfiguration sysConfiguration = docSysConfigurationCacheUtility.readByKeyAndCompanyId(docSysConfigurationCacheUtility.DOC_SUB_CATEGORY_LABEL, companyId)
            if (sysConfiguration) {
                subCategoryLabel = sysConfiguration.value
            }
            SysConfiguration sysConfiguration1 = docSysConfigurationCacheUtility.readByKeyAndCompanyId(docSysConfigurationCacheUtility.DOC_CATEGORY_LABEL, companyId)
            if (sysConfiguration1) {
                categoryLabel = sysConfiguration1.value
            }

            GrailsParameterMap grailsParameterMap = (GrailsParameterMap) parameters
            if (!grailsParameterMap.id) {
                result.put(Tools.MESSAGE, Tools.ERROR_FOR_INVALID_INPUT)
                return result
            }

            long subCategoryId = Long.parseLong(grailsParameterMap.id.toString())
            DocSubCategory oldSubCategory = (DocSubCategory) docSubCategoryCacheUtility.read(subCategoryId)
            if (!oldSubCategory) {
                result.put(Tools.MESSAGE, subCategoryLabel + OBJ_NOT_FOUND)
                return result
            }

            DocCategory category = (DocCategory) docCategoryCacheUtility.read(oldSubCategory.categoryId)
            if (!category.isActive.booleanValue()) {
                result.put(Tools.MESSAGE, categoryLabel + CATEGORY_MUST_BE_ACTIVE)
                return result
            }

            DocSubCategory newSubCategory = buildSubCategory(grailsParameterMap, oldSubCategory, category)
            int duplicateCount = docSubCategoryCacheUtility.countByNameIlikeAndCategoryIdAndIdNotEqual(newSubCategory)
            if (duplicateCount > 0) {
                result.put(Tools.MESSAGE, subCategoryLabel + NAME_MUST_BE_UNIQUE)
                return result
            }



            result.put(SUB_CATEGORY_LABEL, subCategoryLabel)
            result.put(SUB_CATEGORY, newSubCategory)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, UPDATE_FAILURE_MESSAGE + subCategoryLabel)
            return result
        }
    }


    public Object executePostCondition(Object parameters, Object obj) {
        //Do Nothing ofr post - operation
        return null
    }

    /**
     * Update Sub Category object in DB
     * This function is in transactional block and will roll back in case of any exception
     * @param parameters -N/A
     * @param obj -map returned from executePreCondition method
     * @return -a map containing all objects necessary for build result
     */
    @Transactional
    public Object execute(Object parameters, Object obj) {
        Map result = new LinkedHashMap()
        Map preResult = (Map) obj
        String subCategoryLabel = preResult.get(SUB_CATEGORY_LABEL)
        try {
            DocSubCategory subCategory = (DocSubCategory) preResult.get(SUB_CATEGORY)
            docSubCategoryService.update(subCategory)
            docSubCategoryCacheUtility.update(subCategory, docSubCategoryCacheUtility.DEFAULT_SORT_ORDER, docSubCategoryCacheUtility.SORT_ORDER_ASCENDING)

            result.put(SUB_CATEGORY, subCategory)
            result.put(SUB_CATEGORY_LABEL, subCategoryLabel)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception e) {
            log.error(e.getMessage())
            throw new RuntimeException(UPDATE_FAILURE_MESSAGE + subCategoryLabel)

            result.put(Tools.MESSAGE, UPDATE_FAILURE_MESSAGE + subCategoryLabel)
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            return result
        }
    }

    /*
    * @params obj - map from execute method
    * Show newly updated sub category to grid
    * Show success message
    * @return - A map containing all necessary object for show
    * */

    public Object buildSuccessResultForUI(Object obj) {
        Map result = new LinkedHashMap()
        Map preResult = (Map) obj
        String subCategoryLabel = preResult.get(SUB_CATEGORY_LABEL)

        try {
            DocSubCategory subCategory = (DocSubCategory) preResult.get(SUB_CATEGORY)
            GridEntity object = new GridEntity()
            object.id = subCategory.id
            object.cell = [
                    Tools.LABEL_NEW,
                    subCategory.id,
                    subCategory.name,
                    subCategory.description ? subCategory.description : Tools.EMPTY_SPACE,
                    subCategory.isActive ? Tools.YES : Tools.NO
            ]
            result.put(Tools.ENTITY, object)
            result.put(Tools.VERSION, subCategory.version)
            result.put(Tools.MESSAGE, subCategoryLabel + UPDATE_SUCCESS_MESSAGE)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.MESSAGE, UPDATE_FAILURE_MESSAGE + subCategoryLabel)
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            return result
        }
    }

    /*
   * Build Failure result in case of any error
   * @params obj - A map from execute method
   * @return - A map containing all necessary message for show
   * */

    public Object buildFailureResultForUI(Object obj) {
        Map result = new LinkedHashMap()
        Map preResult = (Map) obj
        String subCategoryLabel = preResult.get(SUB_CATEGORY_LABEL)

        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            if (obj) {
                if (preResult.get(Tools.MESSAGE)) {
                    result.put(Tools.MESSAGE, preResult.get(Tools.MESSAGE))
                } else {
                    result.put(Tools.MESSAGE, UPDATE_FAILURE_MESSAGE + subCategoryLabel)
                }
            }
            return result
        } catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.MESSAGE, UPDATE_FAILURE_MESSAGE + subCategoryLabel)
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            return result
        }
    }

    /*
    * Build Sub Category for update
    * */

    private DocSubCategory buildSubCategory(GrailsParameterMap parameterMap, DocSubCategory oldSubCategory,  DocCategory category) {
        DocSubCategory newSubCategory = new DocSubCategory(parameterMap)
        String urlInName = newSubCategory.name.replaceAll(" ", "_").toLowerCase()
        String url = grailsLinkGenerator.link(controller: 'docSubCategory', action: 'showSubCategory', params: [category:category.name, sub:urlInName], absolute: true)
        oldSubCategory.name = newSubCategory.name
        oldSubCategory.description = newSubCategory.description
        oldSubCategory.urlInName = urlInName
        oldSubCategory.url = url
        oldSubCategory.isActive = newSubCategory.isActive
        oldSubCategory.updatedBy = docSessionUtil.appSessionUtil.getAppUser().id
        oldSubCategory.updatedOn = new Date()
        return oldSubCategory
    }
}
