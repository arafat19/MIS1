/**
 * Module  - Inventory
 * Purpose - Entity that contains all properties of Inventory Transaction
 */

package com.athena.mis.inventory.entity

class InvInventoryTransaction {
    long id                         // primary key (Auto generated by its own sequence)
    int version                     // Object version in persistence layer
    long transactionTypeId          // SystemEntity.id ( e.g. IN, OUT, CONSUMPTION)
    long transactionEntityTypeId    // SystemEntity.id (e.g. STORE, SITE, SUPPLIER, NONE)
    long transactionEntityId        // ID of transactionEntityType e.g. id of Store, id of site (0= entityType none)
    long invProductionLineItemId    // ProductionLineItem.id (e.g. Produce-ReadyMix)

    /*F key of InvSiteTransaction(when store-in-from-site)
    F key of InvStoreTransaction(when store-in-from-store)
    F key of InvStoreTransaction(when store-production)
    F key of purchase Order(when store-in from supplier)
    Otherwise 0 */
    long transactionId = 0L

    //for common purpose
    long projectId                  // Project.id
    Date createdOn                  // Object creation DateTime
    long createdBy                  // AppUser.id
    Date updatedOn                  // Object updated DateTime
    long updatedBy                  // AppUser.id
    String comments                 // comment

    //for inventory
    long inventoryTypeId            // SystemEntity.id (e.g Store, Site etc)
    long inventoryId                // InvInventory.id

    long budgetId                   // Budget.id (for consumption specific purpose)
    int itemCount                   // No. of item in InvTransactionDetails
    long companyId                  // Company.id
    Date transactionDate            // user defined date (if not required then transactionDate=createdOn)
    boolean isApproved              // used only in Production-with-Consumption

    static mapping = {
        id generator: 'sequence', params: [sequence: 'inv_inventory_transaction_id_seq']
        transactionDate type: 'date'

        transactionTypeId index: 'inv_inventory_transaction_transaction_type_id_idx'
        transactionEntityTypeId index: 'inv_inventory_transaction_transaction_entity_type_id_idx'
        invProductionLineItemId index: 'inv_inventory_transaction_inv_production_line_item_id_idx'
        projectId index: 'inv_inventory_transaction_project_id_idx'
        createdBy index: 'inv_inventory_transaction_created_by_idx'
        updatedBy index: 'inv_inventory_transaction_updated_by_idx'
        inventoryTypeId index: 'inv_inventory_transaction_inventory_type_id_idx'
        inventoryId index: 'inv_inventory_transaction_inventory_id_idx'
        budgetId index: 'inv_inventory_transaction_budget_id_idx'
        companyId index: 'inv_inventory_transaction_company_id_idx'
        transactionDate index: 'inv_inventory_transaction_transaction_date_idx'
        transactionEntityId index: 'inv_inventory_transaction_transaction_entity_id_idx'
        transactionId index: 'inv_inventory_transaction_transaction_id_idx'
    }

    static constraints = {
        transactionTypeId(nullable: false);
        projectId(nullable: false);
        inventoryTypeId(nullable: false);
        createdOn(nullable: false);
        createdBy(nullable: false);
        updatedOn(nullable: true);
        updatedBy(nullable: false);
        comments(nullable: true);
    }
}
