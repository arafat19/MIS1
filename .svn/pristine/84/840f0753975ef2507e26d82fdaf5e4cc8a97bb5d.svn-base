package com.athena.mis.projecttrack.actions.ptbug

import com.athena.mis.ActionIntf
import com.athena.mis.BaseService
import com.athena.mis.application.entity.SystemEntity
import com.athena.mis.projecttrack.utility.PtSessionUtil
import com.athena.mis.projecttrack.utility.PtBugStatusCacheUtility
import com.athena.mis.utility.Tools
import grails.transaction.Transactional
import groovy.sql.GroovyRowResult
import org.apache.log4j.Logger
import org.codehaus.groovy.grails.web.servlet.mvc.GrailsParameterMap
import org.springframework.beans.factory.annotation.Autowired

class GetBugForModuleActionService extends BaseService implements ActionIntf {
    @Autowired
    PtBugStatusCacheUtility ptBugStatusCacheUtility
    @Autowired
    PtSessionUtil ptSessionUtil

    private final Logger log = Logger.getLogger(getClass())

    private static final String SERVER_ERROR_MESSAGE = "Failed to load bug List"
    private static final String DEFAULT_ERROR_MESSAGE = "Can't Load bug List"
    private static final String BUG_LIST = "bugList"
    private static final String MODULE_ID = "moduleId"
    private static final String STR_TITLE = "title"
    private static final String INPUT_VALIDATION_ERROR = "Error occurred for invalid input"

    public Object executePreCondition(Object parameters, Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            GrailsParameterMap parameterMap = (GrailsParameterMap) parameters
            // Checking parameterMap input validation error
            if (!parameterMap.moduleId) {
                result.put(Tools.MESSAGE, INPUT_VALIDATION_ERROR)
                return result
            }
            long moduleId = Long.parseLong(parameterMap.moduleId.toString())
            result.put(MODULE_ID, moduleId)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, SERVER_ERROR_MESSAGE)
            return result
        }
    }

    /**
     * do nothing for post operation
     */
    public Object executePostCondition(Object parameters, Object obj) {
        return null
    }

    @Transactional(readOnly = true)
    public Object execute(Object parameters, Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            LinkedHashMap preResult = (LinkedHashMap) obj
            long moduleId = (long) preResult.get(MODULE_ID)
            List<GroovyRowResult> lstBugs = getBugsList(moduleId)
            result.put(BUG_LIST, lstBugs)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, SERVER_ERROR_MESSAGE)
            return result
        }
    }

    public Object buildSuccessResultForUI(Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            LinkedHashMap receiveResult = (LinkedHashMap) obj
            List<GroovyRowResult> lstBugs = (List<GroovyRowResult>) receiveResult.get(BUG_LIST)
            result.put(BUG_LIST, Tools.listForKendoDropdown(lstBugs, STR_TITLE, null))
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, SERVER_ERROR_MESSAGE)
            return result
        }
    }


    public Object buildFailureResultForUI(Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            LinkedHashMap receiveResult = (LinkedHashMap) obj
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            if (!receiveResult.message) {
                result.put(Tools.MESSAGE, DEFAULT_ERROR_MESSAGE)
                return result
            }
            result.put(Tools.MESSAGE, receiveResult.get(Tools.MESSAGE))
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, SERVER_ERROR_MESSAGE)
            return result
        }
    }

    /**
     * get backlog list for sprint by moduleId and companyId
     * @param moduleId -module id
     * @return -backlogList
     */
    private List<GroovyRowResult> getBugsList(long moduleId) {
        long companyId = ptSessionUtil.appSessionUtil.getCompanyId()
        SystemEntity statusReopened = (SystemEntity) ptBugStatusCacheUtility.readByReservedAndCompany(ptBugStatusCacheUtility.RE_OPENED_RESERVED_ID, companyId)
        SystemEntity statusSubmitted = (SystemEntity) ptBugStatusCacheUtility.readByReservedAndCompany(ptBugStatusCacheUtility.SUBMITTED_RESERVED_ID, companyId)

        String queryStr = """
                SELECT bug.id AS id, bug.title AS title
                FROM pt_bug bug
                WHERE bug.module_id =:moduleId
                AND bug.company_id =:companyId
                AND bug.sprint_id = 0
                AND bug.status IN (${statusReopened.id},${statusSubmitted.id})
                ORDER BY title
        """
        Map queryParams = [
                moduleId: moduleId,
                companyId: companyId
        ]
        List<GroovyRowResult> bugList = executeSelectSql(queryStr, queryParams)
        return bugList
    }
}
