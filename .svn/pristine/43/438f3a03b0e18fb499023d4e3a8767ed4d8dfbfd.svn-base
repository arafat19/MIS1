/**
 * Module Name - Procurement
 * Purpose - Entity of procurement purchase request
 * */

package com.athena.mis.procurement.entity

class ProcPurchaseRequest {
    long id                             // primary key (Auto generated by its own sequence)
    int version
    long projectId                      // Project.id (Redundant)
    Date createdOn                      // Object Creation DateTime
    long createdBy                      // AppUser.id
    Date updatedOn                      // Object updated DateTime
    long updatedBy                      // AppUser.id
    String comments
    long approvedByDirectorId           // AppUser.id
    long approvedByProjectDirectorId    // AppUser.id
    int itemCount = 0                   // no of item for this PR
    Long indentId                       // ProcIndent.id
    long companyId                      // Company.id

    boolean sentForApproval             // boolean value for mail send check

    static mapping = {
        id generator: 'sequence', params: [sequence: 'proc_purchase_request_id_seq']
        projectId index: 'proc_purchase_request_project_id_idx'
        indentId index: 'proc_purchase_request_indent_id_idx'
        companyId index: 'proc_purchase_request_company_id_idx'
        createdBy index: 'proc_purchase_request_created_by_idx'
        updatedBy index: 'proc_purchase_request_updated_by_idx'
        approvedByDirectorId index: 'proc_purchase_request_approved_by_director_id_idx'
        approvedByProjectDirectorId index: 'proc_purchase_request_approved_by_project_director_id_idx'
    }

    static constraints = {
        projectId(nullable: false)
        createdOn(nullable: false)
        createdBy(nullable: false)
        updatedOn(nullable: true)
        updatedBy(nullable: false)
        comments(nullable: true)
        approvedByDirectorId(nullable: false)
        approvedByProjectDirectorId(nullable: false)
        itemCount(nullable: false)
        companyId(nullable: false)
        sentForApproval(nulable: false)
    }

    static namedQueries = {
        upapprovedPRListByProjectIds { List<Long> projectIds ->
            'in'("projectId", projectIds)
            or {
                eq("approvedByDirectorId", 0L)
                eq("approvedByProjectDirectorId", 0L)
            }
        }
    }
}