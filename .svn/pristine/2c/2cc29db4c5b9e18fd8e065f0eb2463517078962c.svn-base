package com.athena.mis.exchangehouse.service

import com.athena.mis.BaseService
import com.athena.mis.exchangehouse.entity.ExhCustomer
import com.athena.mis.utility.DateUtility
import com.athena.mis.utility.Tools

class ExhCustomerService extends BaseService {

    static transactional = false

    public ExhCustomer read(Long id) {
        ExhCustomer customer = ExhCustomer.read(id)
        return customer
    }

    private static final String LEADING_ZERO = '0'

    /**
     * Get customer code
     */
    public String getCustomerCode(long customerId, long companyId) {
        return (companyId < 10 ? LEADING_ZERO : Tools.EMPTY_SPACE) + companyId.toString() + customerId.toString()
    }

    /**
     * Save customer object into DB
     * @param customer -ExhCustomer object
     * @return -saved customer object
     */
    public ExhCustomer create(ExhCustomer customer) {
        customer.id = getNextVal()
        customer.version = 0
        customer.code = getCustomerCode(customer.id, customer.companyId)

        String queryStr = """
            INSERT INTO exh_customer
            (
                id,
                version,
                address,
                code,
                country_id,
                date_of_birth,
                created_on,
                email,
                name,
				surname,
                phone,
                post_code,
                photo_id_no,
                photo_id_type_id,
                photo_id_expiry_date,
                address_verified_status,
                source_of_fund,
                declaration_amount,
                declaration_start,
                declaration_end,
                company_reg_no,
                date_of_incorporation,
                visa_expire_date,
                company_id,
                agent_id,
                user_id,
                is_sanction_exception,
                profession,
                sms_subscription,
                mail_subscription,
                gender_id,
                is_blocked
            )   VALUES  (
                ${customer.id},
                ${customer.version},
                :address,
                '${customer.code}',
                ${customer.countryId},
                '${DateUtility.getDBDateFormat(customer.dateOfBirth)}',
                '${DateUtility.getDBDateFormatWithSecond(customer.createdOn)}',
                :email,
                :name,
                :surname,
                :phone,
                :postCode,
                :photoIdNo,
                ${customer.photoIdTypeId},
                ${customer.photoIdExpiryDate ? "'" + DateUtility.getDBDateFormat(customer.photoIdExpiryDate) + "'" : null},
                ${customer.addressVerifiedStatus},
                :sourceOfFund,
                ${customer.declarationAmount},
                ${customer.declarationStart ? "'" + DateUtility.getDBDateFormat(customer.declarationStart) + "'" : null},
                ${customer.declarationEnd ? "'" + DateUtility.getDBDateFormat(customer.declarationEnd) + "'" : null},
                ${customer.companyRegNo},
                :dateOfIncorporation,
                ${customer.visaExpireDate ? "'" + DateUtility.getDBDateFormat(customer.visaExpireDate) + "'" : null},
                ${customer.companyId},
                ${customer.agentId},
                ${customer.userId},
                ${customer.isSanctionException},
                :profession,
                 ${customer.smsSubscription},
                 ${customer.mailSubscription},
                 ${customer.genderId},
                 :isBlocked
            )
        """

        Map queryParams = [
                address: customer.address,
                email: customer.email,
                name: customer.name,
                surname: customer.surname,
                phone: customer.phone,
                postCode: customer.postCode,
                photoIdNo: customer.photoIdNo,
                sourceOfFund: customer.sourceOfFund,
                profession: customer.profession,
                dateOfIncorporation: customer.dateOfIncorporation,
                isBlocked:Boolean.FALSE

        ]

        List ret = executeInsertSql(queryStr, queryParams)

        /*boolean saveTrace = exhCustomerTraceService.create(customer, new Date(), Tools.ACTION_CREATE)
        if (!saveTrace) throw new RuntimeException("Customer Trace save failed. Object:" + customer)*/

        return customer
    }

    // get the next id sequence for customer
    private static final String SELECT_CUSTOMER_NEXT_VAL = "select nextval('exh_customer_id_seq')"

    private Long getNextVal() {
        List result = executeSelectSql(SELECT_CUSTOMER_NEXT_VAL)
        Long customerID = (Long) result[0][0]
        return customerID
    }

    /**
     * Update customer object in DB
     * @param customer -ExhCustomer object
     * @return -updated customer object
     */
    public Integer update(ExhCustomer customer) {
        String query = """
        UPDATE exh_customer SET
            version=${customer.version + 1},
            name=:name,
            surname=:surname,
            photo_id_type_id='${customer.photoIdTypeId}',
            country_id='${customer.countryId}',
            email=:email,
            photo_id_no=:photoIdNo,
            phone=:phone,
            post_code=:postCode,
            date_of_birth='${DateUtility.getDBDateFormat(customer.dateOfBirth)}',
            address=:address,
            photo_id_expiry_date=${customer.photoIdExpiryDate ? "'" + DateUtility.getDBDateFormat(customer.photoIdExpiryDate) + "'" : null},
            address_verified_status=${customer.addressVerifiedStatus},
            is_sanction_exception=${customer.isSanctionException},
            source_of_fund=:sourceOfFund,
            profession=:profession,
            declaration_amount=${customer.declarationAmount},
            declaration_start=${customer.declarationStart ? "'" + DateUtility.getDBDateFormat(customer.declarationStart) + "'" : null},
            declaration_end=${customer.declarationEnd ? "'" + DateUtility.getDBDateFormat(customer.declarationEnd) + "'" : null},
            company_reg_no=:companyRegNo,
            date_of_incorporation=:dateOfIncorporation,
            visa_expire_date=${customer.visaExpireDate ? "'" + DateUtility.getDBDateFormat(customer.visaExpireDate) + "'" : null},
            sms_subscription=${customer.smsSubscription},
            mail_subscription=${customer.mailSubscription},
            gender_id=${customer.genderId}
        WHERE
            id=${customer.id} AND
            version=${customer.version}
    """

        Map queryParams = [
                name: customer.name,
                surname: customer.surname,
                email: customer.email,
                photoIdNo: customer.photoIdNo,
                phone: customer.phone,
                postCode: customer.postCode,
                address: customer.address,
                sourceOfFund: customer.sourceOfFund,
                profession: customer.profession,
                dateOfIncorporation: customer.dateOfIncorporation,
                companyRegNo:customer.companyRegNo
        ]

        int updateCount = executeUpdateSql(query, queryParams);
        customer.version = customer.version + 1
        if (updateCount <= 0) {
            throw new RuntimeException("Failed to update Customer")
        }
        /*if (updateCount > 0) {
            exhBeneficiaryService.updateForCustomerUpdate(customer)
        }

        boolean saveTrace = exhCustomerTraceService.create(customer, new Date(), Tools.ACTION_UPDATE)
        if (!saveTrace) throw new RuntimeException("Customer Trace save failed. Object:" + customer)*/
        return (new Integer(updateCount));
    }

    private static final String UPDATE_QUERY_FOR_BLOCK_CUSTOMER="""
        UPDATE exh_customer
        SET is_blocked= true,
            version=:version
        WHERE id=:id
        AND company_id=:companyId
    """
    public void updateBlockCustomer(ExhCustomer exhCustomer){
        Map queryParams=[
                companyId:exhCustomer.companyId,
                id:exhCustomer.id,
                version:exhCustomer.version+1
        ]
        int updateCount= executeUpdateSql(UPDATE_QUERY_FOR_BLOCK_CUSTOMER,queryParams)
        if(updateCount<=0){
            throw new RuntimeException("Failed to update Customer")
        }
    }

}
