package com.athena.mis.document.actions.memberjoinrequest

import com.athena.mis.ActionIntf
import com.athena.mis.BaseService
import com.athena.mis.GridEntity
import com.athena.mis.document.utility.DocSessionUtil
import com.athena.mis.utility.DateUtility
import com.athena.mis.utility.Tools
import groovy.sql.GroovyRowResult
import org.apache.log4j.Logger
import org.codehaus.groovy.grails.web.servlet.mvc.GrailsParameterMap
import org.springframework.beans.factory.annotation.Autowired

class SearchDocMemberJoinRequestActionService extends BaseService implements ActionIntf {
    private Logger log = Logger.getLogger(getClass())

    private static final String DEFAULT_ERROR_MESSAGE = 'Failed to load applied requested member list'
    private static final String LIST_REQUESTED_MEMBER = 'lstRequestedMember'
    private static final String GRID_OBJ = 'gridObj'
    private static final String PENDING = 'Pending'
    private static final String SPAN_START = "<span style='color:red'>"
    private static final String SPAN_END = "</span>"
    private static final String EXPIRED = "Expired"
    private static final String DAYS = " Day(s)"
    private static final String STR_NOT_APPLICABLE_LABEL = "<span>N/A</span>"

    @Autowired
    DocSessionUtil docSessionUtil

    public Object executePreCondition(Object parameters, Object obj) {
        //Do nothing for pre-operation
        return null
    }


    public Object executePostCondition(Object parameters, Object obj) {
        //Do nothing for post-operation
        return null
    }

    /*
    * @param parameters - serialize parameters from UI
    * Category and Sub category Label from system configuration
    * @param obj - N/A
    * @return - A map containing all objects of categoryList,count of categoryList for buildSuccessResultForUI
    * */

    public Object execute(Object parameters, Object obj) {
        Map result = new LinkedHashMap()
        try {
            GrailsParameterMap params = (GrailsParameterMap) parameters
            initSearch(params)
            Date fromDate = DateUtility.parseMaskedFromDate(params.fromDate.toString())
            Date toDate = DateUtility.parseMaskedToDate(params.toDate.toString())
            Map joinRequestResult = searchOutstandingInvitations(fromDate, toDate)
            List<GroovyRowResult> lstJoinRequest = joinRequestResult.lstJoinRequest
            //get list of category from cache utility
            int count = joinRequestResult.count
            result.put(LIST_REQUESTED_MEMBER, lstJoinRequest)
            result.put(Tools.COUNT, count)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, DEFAULT_ERROR_MESSAGE)
            return result
        }
    }

    /*
    * Build Success Results for grid in UI
    * @params obj - Map return from execute method
    * Wrap Category list for grid
    * @return a map of containing all object necessary for show page
    * */

    public Object buildSuccessResultForUI(Object obj) {
        Map result = new LinkedHashMap()
        try {
            Map preResult = (Map) obj
            List<GroovyRowResult> lstJoinRequest = (List<GroovyRowResult>) preResult.get(LIST_REQUESTED_MEMBER)
            int count = (int) preResult.get(Tools.COUNT)
            List wrapListJoinRequest = wraplstJoinRequest(lstJoinRequest, start)
            Map gridObject = [page: pageNumber, total: count, rows: wrapListJoinRequest]
            result.put(GRID_OBJ, gridObject)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result

        } catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.MESSAGE, DEFAULT_ERROR_MESSAGE)
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            return result
        }
    }

    /*
    * Build Failure result for UI
    * @params obj - A map from execute method
    * @return a Map containing IsError and default error message/relevant error message to display
    * */

    public Object buildFailureResultForUI(Object obj) {
        Map result = new LinkedHashMap()
        try {
            Map preResult = (Map) obj
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            if (obj) {
                if (preResult.get(Tools.MESSAGE)) {
                    result.put(Tools.MESSAGE, preResult.get(Tools.MESSAGE))
                    return result
                }
            }
            result.put(Tools.MESSAGE, DEFAULT_ERROR_MESSAGE)
            return result

        } catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, DEFAULT_ERROR_MESSAGE)
            return result
        }
    }

    /*
    * Wrap Category List for Grid
    * @params catList - List of Category List
    * @params start - starting index of the page
    * @return List of wrapped category
    * */

    private List wraplstJoinRequest(List<GroovyRowResult> lstJoinRequest, int start) {
        List wrapListJoinRequest = []
        int counter = start + 1
        for (int i = 0; i < lstJoinRequest.size(); i++) {
            GridEntity object = new GridEntity()
            GroovyRowResult rowResult = lstJoinRequest[i]
            Date expiredOnEnd = DateUtility.getSqlDate(rowResult.expired_on)
            String requestApprovedDate = DateUtility.getDateForSMS(rowResult.approved_on)
            object.id = rowResult.id
            object.cell = [
                    counter,
                    rowResult.id,
                    rowResult.email,
                    rowResult.user_name,
                    rowResult.category_name,
                    rowResult.sub_category_name ? rowResult.sub_category_name : Tools.EMPTY_SPACE,
                    rowResult.approved_on ? requestApprovedDate : PENDING,
                    requestApprovedDate ? STR_NOT_APPLICABLE_LABEL : expiredOnEnd.before(new Date()) ? SPAN_START + EXPIRED + SPAN_END : expiredOnEnd - new Date() + DAYS
            ]
            wrapListJoinRequest << object
            counter++
        }
        return wrapListJoinRequest
    }

    private Map searchOutstandingInvitations(Date fromDate, Date toDate) {
        String QUERY_FOR_LIST = """
            SELECT dmjr.id AS id, dmjr.email AS email, dmjr.created_on, dmjr.expired_on AS expired_on, dmjr.user_name, dmjr.approved_on, dc.name AS category_name, dsc.name AS sub_category_name
            FROM doc_member_join_request dmjr
            LEFT JOIN doc_category dc ON dmjr.category_id = dc.id
            LEFT JOIN doc_sub_category dsc ON dmjr.sub_category_id = dsc.id
            WHERE dmjr.company_id = :companyId
            AND dmjr.created_on BETWEEN '${fromDate}' AND'${toDate}'
            AND ${queryType} ilike :query
            ORDER BY ${sortColumn} ${sortOrder}
            LIMIT :resultPerPage OFFSET :start
        """
        String QUERY_FOR_COUNT = """
            SELECT COUNT(dmjr.id) count
            FROM doc_member_join_request dmjr
            LEFT JOIN doc_category dc ON dmjr.category_id = dc.id
            LEFT JOIN doc_sub_category dsc ON dmjr.sub_category_id = dsc.id
            WHERE dmjr.company_id = :companyId
            AND dmjr.created_on BETWEEN '${fromDate}' AND'${toDate}'
            AND ${queryType} ilike :query
        """

        Map queryParams = [
                query        : Tools.PERCENTAGE + query + Tools.PERCENTAGE,
                companyId    : docSessionUtil.appSessionUtil.getCompanyId(),
                resultPerPage: resultPerPage, start: start
        ]
        List<GroovyRowResult> docMemberJoinRequests = executeSelectSql(QUERY_FOR_LIST, queryParams)
        List<GroovyRowResult> resultCount = executeSelectSql(QUERY_FOR_COUNT, queryParams)
        int count = (int) resultCount[0][0]
        return [lstJoinRequest: docMemberJoinRequests, count: count]
    }
}
