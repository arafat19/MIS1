package com.athena.mis.projecttrack.actions.ptbug

import com.athena.mis.ActionIntf
import com.athena.mis.BaseService
import com.athena.mis.GridEntity
import com.athena.mis.projecttrack.utility.PtSessionUtil
import com.athena.mis.utility.DateUtility
import com.athena.mis.utility.Tools
import grails.transaction.Transactional
import groovy.sql.GroovyRowResult
import org.apache.log4j.Logger
import org.codehaus.groovy.grails.web.servlet.mvc.GrailsParameterMap
import org.springframework.beans.factory.annotation.Autowired

/**
 *  Get list of orphan bug
 *  For details go through Use-Case doc named 'ListOrphanBugActionService'
 */
class ListOrphanBugActionService extends BaseService implements ActionIntf {

    @Autowired
    PtSessionUtil ptSessionUtil

    private final Logger log = Logger.getLogger(getClass())

    private static final String SHOW_BUG_FAILURE_MESSAGE = "Failed to load bug page"
    private static final String LST_BUG = "lstBug"

    /**
     * Do nothing for pre operation
     */
    public Object executePreCondition(Object parameters, Object obj) {
        return null
    }

    /**
     * 1. Get Bug list by backlogId and companyId for grid
     * 2. Get count of total Bug by backlogId and companyId
     * @param parameters -serialized parameters from UI
     * @param obj -N/A
     * @return -a map containing all objects necessary for buildSuccessResultForUI
     * map contains isError(true/false) depending on method success
     */
    @Transactional(readOnly = true)
    public Object execute(Object parameters, Object obj) {
        Map result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            GrailsParameterMap parameterMap = (GrailsParameterMap) parameters
            initPager(parameterMap)                                 // initialize parameters
            Map serviceReturn = list()
            List<GroovyRowResult> lstBugs = serviceReturn.bugList        // get list of Bug from DB
            int count = (int) serviceReturn.count
            result.put(LST_BUG, lstBugs)
            result.put(Tools.COUNT, count)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, SHOW_BUG_FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Do nothing for post operation
     */
    public Object executePostCondition(Object parameters, Object obj) {
        return null
    }

    /**
     * Wrap Bug list for grid
     * @param obj -map returned from execute method
     * @return -a map containing all objects necessary to indicate success event
     */
    public Object buildSuccessResultForUI(Object obj) {
        Map result = new LinkedHashMap()
        try {
            Map executeResult = (Map) obj
            List<GroovyRowResult> lstBugs = (List<GroovyRowResult>) executeResult.get(LST_BUG)
            int count = (int) executeResult.get(Tools.COUNT)
            List lstWrappedBugs = wrapBugs(lstBugs, start)
            Map output = [page: pageNumber, total: count, rows: lstWrappedBugs]
            return output
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, SHOW_BUG_FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Build failure result in case of any error
     * @param obj -map returned from previous methods, can be null
     * @return -a map containing isError = true & relevant error message
     */
    public Object buildFailureResultForUI(Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            if (obj) {
                LinkedHashMap preResult = (LinkedHashMap) obj
                if (preResult.get(Tools.MESSAGE)) {
                    result.put(Tools.MESSAGE, preResult.get(Tools.MESSAGE))
                    return result
                }
            }
            result.put(Tools.MESSAGE, SHOW_BUG_FAILURE_MESSAGE)
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, SHOW_BUG_FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Wrap list of Bugs in grid entity
     * @param lstBugs -list of Bug object
     * @param start -starting index of the page
     * @return -list of wrapped Bugs
     */
    private List wrapBugs(List<GroovyRowResult> lstBugs, int start) {
        List lstWrappedBugs = []
        int counter = start + 1
        for (int i = 0; i < lstBugs.size(); i++) {
            GroovyRowResult groovyRowResult = lstBugs[i]
            GridEntity obj = new GridEntity()
            obj.id = groovyRowResult.id
            obj.cell = [
                    counter,
                    groovyRowResult.id,
                    groovyRowResult.title,
                    groovyRowResult.step_to_reproduce,
                    groovyRowResult.status,
                    groovyRowResult.severity,
                    groovyRowResult.type,
                    DateUtility.getLongDateForUI(groovyRowResult.created_on),
                    groovyRowResult.created_by,
                    groovyRowResult.has_attachment? Tools.YES : Tools.NO
            ]
            lstWrappedBugs << obj
            counter++
        }
        return lstWrappedBugs
    }

    private static final String QUERY_STR = """
        SELECT bug.id, bug.title, bug.step_to_reproduce, status.key AS status, severity.key severity, type.key as type,
            bug.created_on, au.username created_by, bug.has_attachment
        FROM pt_bug bug
        LEFT JOIN app_user au ON bug.created_by = au.id
        LEFT JOIN system_entity status ON status.id = bug.status
        LEFT JOIN system_entity severity ON severity.id = bug.severity
        LEFT JOIN system_entity type ON type.id = bug.type
        WHERE bug.company_id = :companyId
        AND bug.backlog_id = 0
        ORDER BY title
        LIMIT :resultPerPage OFFSET :start
    """

    private static final String QUERY_FOR_COUNT = """
        SELECT COUNT(bug.id) AS count
        FROM pt_bug bug
        WHERE bug.company_id = :companyId
        AND bug.backlog_id = 0
    """

    /**
     * Get list of orphan bug
     * @return -a map containing list and count of orphan bug
     */
    private Map list() {
        Map queryParams = [
                resultPerPage: resultPerPage,
                start: start,
                companyId: ptSessionUtil.appSessionUtil.getCompanyId()
        ]
        List<GroovyRowResult> lstBugs = executeSelectSql(QUERY_STR, queryParams)
        List countResults = executeSelectSql(QUERY_FOR_COUNT, queryParams)
        int count = countResults[0].count
        return [bugList: lstBugs, count: count]
    }
}
