package com.athena.mis.projecttrack.actions.report.backlog

import com.athena.mis.ActionIntf
import com.athena.mis.BaseService
import com.athena.mis.application.entity.AppUser
import com.athena.mis.application.entity.SystemEntity
import com.athena.mis.application.service.EntityNoteService
import com.athena.mis.application.utility.AppUserCacheUtility
import com.athena.mis.application.utility.NoteEntityTypeCacheUtility
import com.athena.mis.projecttrack.entity.PtBacklog
import com.athena.mis.projecttrack.entity.PtModule
import com.athena.mis.projecttrack.entity.PtSprint
import com.athena.mis.projecttrack.service.PtAcceptanceCriteriaService
import com.athena.mis.projecttrack.service.PtBacklogService
import com.athena.mis.projecttrack.service.PtBugService
import com.athena.mis.projecttrack.service.PtFlowService
import com.athena.mis.projecttrack.service.PtSprintService
import com.athena.mis.projecttrack.utility.PtAcceptanceCriteriaTypeCacheUtility
import com.athena.mis.projecttrack.utility.PtBacklogPriorityCacheUtility
import com.athena.mis.projecttrack.utility.PtBacklogStatusCacheUtility
import com.athena.mis.projecttrack.utility.PtModuleCacheUtility
import com.athena.mis.utility.DateUtility
import com.athena.mis.utility.Tools
import grails.transaction.Transactional
import org.apache.log4j.Logger
import org.codehaus.groovy.grails.web.servlet.mvc.GrailsParameterMap
import org.springframework.beans.factory.annotation.Autowired

/**
 *  Get details of PtBacklog
 *  For details go through Use-Case doc named 'SearchPtBacklogDetailsActionService'
 */
class SearchPtBacklogDetailsActionService extends BaseService implements ActionIntf {

    PtBacklogService ptBacklogService
    PtSprintService ptSprintService
    PtBugService ptBugService
    EntityNoteService entityNoteService
    PtAcceptanceCriteriaService ptAcceptanceCriteriaService
    PtFlowService ptFlowService
    @Autowired
    PtAcceptanceCriteriaTypeCacheUtility ptAcceptanceCriteriaTypeCacheUtility
    @Autowired
    AppUserCacheUtility appUserCacheUtility
    @Autowired
    PtModuleCacheUtility ptModuleCacheUtility
    @Autowired
    PtBacklogStatusCacheUtility ptBacklogStatusCacheUtility
    @Autowired
    NoteEntityTypeCacheUtility noteEntityTypeCacheUtility
    @Autowired
    PtBacklogPriorityCacheUtility ptBacklogPriorityCacheUtility

    private Logger log = Logger.getLogger(getClass())

    private static final String FAILURE_MESSAGE = "Failed to generate search task report"
    private static final String NOT_FOUND_MSG = "Backlog not found"
    private static final String BACKLOG_MAP = "backlogMap"
    private static final String USE_CASE_ID = "Use Case ID"
    private static final String URL = "URL"
    private static final String INVALID_BACKLOG_ID = "Please enter digits for searching by backlog ID"

    /**
     * Get parameters from UI and check required information
     * @param parameters -serialized parameters from UI
     * @param obj -N/A
     * @return -a map containing all objects necessary for execute
     * map contains isError(true/false) depending on method success
     */
    public Object executePreCondition(Object parameters, Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)          // set default value
            GrailsParameterMap params = (GrailsParameterMap) parameters
            initPager(params)
            if (!params.backlogId) {
                result.put(Tools.MESSAGE, Tools.ERROR_FOR_INVALID_INPUT)
                return result
            }
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Get details of PtBacklog
     * @param parameters -serialized parameters from UI
     * @param obj -N/A
     * @return -a map containing all objects necessary for show
     * map contains isError(true/false) depending on method success
     */
    @Transactional(readOnly = true)
    public Object execute(Object parameters, Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            GrailsParameterMap params = (GrailsParameterMap) parameters
            PtBacklog backlog
            if (params.idType.toString().equals(USE_CASE_ID)) {
                String useCaseId = params.backlogId
                backlog = ptBacklogService.findByUseCaseIdIlike(useCaseId)
            } else if (params.idType.toString().equals(URL)) {
                String url = params.backlogId
                backlog = ptBacklogService.findByUrlIlike(url)
            } else {
                long backlogId
                try {
                    backlogId = Long.parseLong(params.backlogId.toString())
                } catch (Exception ex) {
                    result.put(Tools.MESSAGE, INVALID_BACKLOG_ID)
                    return result
                }
                backlog = ptBacklogService.read(backlogId)
            }
            if (!backlog) {
                result.put(Tools.MESSAGE, NOT_FOUND_MSG)
                return result
            }
            Map backlogMap = buildMapForBacklog(backlog)
            result.put(BACKLOG_MAP, backlogMap)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Do nothing for post operation
     */
    public Object executePostCondition(Object parameters, Object obj) {
        return null
    }

    /**
     * Do nothing for build success result
     */
    public Object buildSuccessResultForUI(Object obj) {
        return null
    }

    /**
     * Build failure result in case of any error
     * @param obj -map returned from previous methods, can be null
     * @return -a map containing isError = true & relevant error message
     */
    public Object buildFailureResultForUI(Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            if (obj) {
                LinkedHashMap preResult = (LinkedHashMap) obj       // cast map returned from execute method
                result.put(Tools.MESSAGE, preResult.get(Tools.MESSAGE))
            } else {
                result.put(Tools.MESSAGE, FAILURE_MESSAGE)
            }
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Build a map with necessary properties of backlog
     * @param backlog -object of PtBacklog
     * @return -a map containing the necessary properties of backlog
     */
    private Map buildMapForBacklog(PtBacklog backlog) {
        AppUser owner = (AppUser) appUserCacheUtility.read(backlog.ownerId)
        AppUser createdBy = (AppUser) appUserCacheUtility.read(backlog.createdBy)
        PtModule module = (PtModule) ptModuleCacheUtility.read(backlog.moduleId)
        PtSprint sprint = ptSprintService.read(backlog.sprintId)
        SystemEntity status = (SystemEntity) ptBacklogStatusCacheUtility.read(backlog.statusId)
        SystemEntity priority = (SystemEntity) ptBacklogPriorityCacheUtility.read(backlog.priorityId)
        int bugCount = ptBugService.countByBacklogIdAndCompanyId(backlog.id, backlog.companyId)
        int acCount = ptAcceptanceCriteriaService.countByCompanyIdAndBacklogId(backlog.companyId, backlog.id)
        SystemEntity noteEntityType = (SystemEntity) noteEntityTypeCacheUtility.readByReservedAndCompany(noteEntityTypeCacheUtility.COMMENT_ENTITY_TYPE_PT_TASK, backlog.companyId)
        int noteCount = entityNoteService.countByEntityTypeIdAndEntityIdAndCompanyId(noteEntityType.id, backlog.id, backlog.companyId)
        SystemEntity preCondition = (SystemEntity) ptAcceptanceCriteriaTypeCacheUtility.readByReservedAndCompany(ptAcceptanceCriteriaTypeCacheUtility.PRE_CONDITION_RESERVED_ID, backlog.companyId)
        SystemEntity postCondition = (SystemEntity) ptAcceptanceCriteriaTypeCacheUtility.readByReservedAndCompany(ptAcceptanceCriteriaTypeCacheUtility.POST_CONDITION_RESERVED_ID, backlog.companyId)
        SystemEntity businessLogic = (SystemEntity) ptAcceptanceCriteriaTypeCacheUtility.readByReservedAndCompany(ptAcceptanceCriteriaTypeCacheUtility.BUSINESS_LOGIC_RESERVED_ID, backlog.companyId)
        SystemEntity others = (SystemEntity) ptAcceptanceCriteriaTypeCacheUtility.readByReservedAndCompany(ptAcceptanceCriteriaTypeCacheUtility.OTHERS_RESERVED_ID, backlog.companyId)
        int countPreCondition = ptAcceptanceCriteriaService.countByCompanyIdAndBacklogIdAndType(backlog.companyId, backlog.id, preCondition.id)
        int countPostCondition = ptAcceptanceCriteriaService.countByCompanyIdAndBacklogIdAndType(backlog.companyId, backlog.id, postCondition.id)
        int countBusinessLogic = ptAcceptanceCriteriaService.countByCompanyIdAndBacklogIdAndType(backlog.companyId, backlog.id, businessLogic.id)
        int countOthers = ptAcceptanceCriteriaService.countByCompanyIdAndBacklogIdAndType(backlog.companyId, backlog.id, others.id)
        int countFlow = ptFlowService.countByCompanyIdAndBacklogId(backlog.companyId, backlog.id)
        Map backlogMap = [
                id: backlog.id,
                actor: backlog.actor,
                purpose: backlog.purpose,
                benefit: backlog.benefit,
                useCaseId: backlog.useCaseId,
                owner: owner ? owner.username : Tools.EMPTY_SPACE,
                module: module.name,
                sprint: sprint ? sprint.name : Tools.EMPTY_SPACE,
                createdBy: createdBy.username,
                createdOn: DateUtility.getDateFormatAsString(backlog.createdOn),
                status: status.key,
                priority: priority.key,
                bugCount: bugCount,
                acCount: acCount,
                noteCount: noteCount,
                countPreCondition: countPreCondition,
                countPostCondition: countPostCondition,
                countBusinessLogic: countBusinessLogic,
                countOthers: countOthers,
                countFlow: countFlow
        ]
        return backlogMap
    }
}

