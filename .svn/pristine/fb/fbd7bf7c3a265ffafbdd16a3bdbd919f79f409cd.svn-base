package com.athena.mis.document.actions.appuserdocsubcategory

import com.athena.mis.ActionIntf
import com.athena.mis.BaseService
import com.athena.mis.document.entity.DocSubCategoryUserMapping
import com.athena.mis.document.service.DocAllCategoryUserMappingService
import com.athena.mis.document.service.DocSubCategoryUserMappingService
import com.athena.mis.utility.Tools
import org.apache.log4j.Logger
import org.codehaus.groovy.grails.web.servlet.mvc.GrailsParameterMap
import org.springframework.transaction.annotation.Transactional

class SelectAppUserDocSubCategoryActionService extends BaseService implements ActionIntf {

    private Logger log = Logger.getLogger(getClass())

    private static final String NOT_FOUND_MASSAGE = "Selected member object not found"
    private static final String DEFAULT_ERROR_MESSAGE = "Failed to select member"
    private static final String APP_USER_SUB_CATEGORY = "appUserSubCategory"

    DocSubCategoryUserMappingService docSubCategoryUserMappingService

    /**
     * Do nothing for pre condition
     */
    public Object executePreCondition(Object params, Object obj) {
        return null
    }

    /**
     * Get AllCategoryUserMapping object by id
     *  1.Get the AllCategoryUserMapping object from DB
     * @param parameters -serialized parameters from UI
     * @param obj -N/A
     * @return -a map containing all objects necessary for buildSuccessResultForUI
     * map contains isError(true/false) depending on method success
     * This method is in transactional boundary and will roll back in case of any exception
     */
    @Transactional(readOnly = true)
    public Object execute(Object params, Object obj) {
        Map result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)    // default value
            GrailsParameterMap parameterMap = (GrailsParameterMap) params
            // check required parameters
            if (!parameterMap.id) {
                result.put(Tools.MESSAGE, Tools.ERROR_FOR_INVALID_INPUT)
                return result
            }
            long appUserSubCategoryId = Long.parseLong(parameterMap.id)
            DocSubCategoryUserMapping docSubCategoryUserMapping = (DocSubCategoryUserMapping) docSubCategoryUserMappingService.read(appUserSubCategoryId)
            if (!docSubCategoryUserMapping) {
                result.put(Tools.MESSAGE, NOT_FOUND_MASSAGE)
                return result
            }
            result.put(APP_USER_SUB_CATEGORY, docSubCategoryUserMapping)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, NOT_FOUND_MASSAGE)
            return result
        }
    }

    /**
     * Do nothing for post condition
     */
    public Object executePostCondition(Object params, Object obj) {
        return null
    }

    /**
     * Build a map with AllCategoryUserMapping object & other related properties to show on UI
     * @param obj -map returned from execute method
     * @return -a map containing all objects necessary for show
     * map contains isError(true/false) depending on method success
     */
    public Object buildSuccessResultForUI(Object obj) {
        Map result = new LinkedHashMap()
        try {
            Map executeResult = (LinkedHashMap) obj   // cast map returned from execute method
            DocSubCategoryUserMapping docSubCategoryUserMapping = (DocSubCategoryUserMapping) executeResult.get(APP_USER_SUB_CATEGORY)
            result.put(Tools.ENTITY, docSubCategoryUserMapping)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, DEFAULT_ERROR_MESSAGE)
            return result
        }
    }

    /**
     * Build failure result in case of any error
     * @param obj -map returned from previous methods
     * @return -a map containing isError = true & relevant error message
     */
    public Object buildFailureResultForUI(Object obj) {
        Map result = new LinkedHashMap()
        try {
            Map preResult = (LinkedHashMap) obj
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            if (preResult.get(Tools.MESSAGE)) {
                result.put(Tools.MESSAGE, preResult.get(Tools.MESSAGE))
            } else {
                result.put(Tools.MESSAGE, DEFAULT_ERROR_MESSAGE)
            }
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, DEFAULT_ERROR_MESSAGE)
            return result
        }
    }
}
