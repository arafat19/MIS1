package com.athena.mis.application.actions.sms

import com.athena.mis.ActionIntf
import com.athena.mis.BaseService
import com.athena.mis.GridEntity
import com.athena.mis.application.entity.Sms
import com.athena.mis.application.service.SmsService
import com.athena.mis.application.utility.RoleTypeCacheUtility
import com.athena.mis.application.utility.AppSessionUtil
import com.athena.mis.application.utility.SmsCacheUtility
import com.athena.mis.utility.Tools
import org.apache.log4j.Logger
import org.codehaus.groovy.grails.web.servlet.mvc.GrailsParameterMap
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.transaction.annotation.Transactional

/**
 *  Show list of SMS for grid
 *  For details go through Use-Case doc named 'ListSmsActionService'
 */
class ListSmsActionService extends BaseService implements ActionIntf {

    private final Logger log = Logger.getLogger(getClass())

    SmsService smsService
    @Autowired
    SmsCacheUtility smsCacheUtility
    @Autowired
    AppSessionUtil appSessionUtil
    @Autowired
    RoleTypeCacheUtility roleTypeCacheUtility

    private static final String SHOW_FAILURE_MESSAGE = "Failed to load sms page"
    private static final String SMS_LIST = "smsList"

    /**
     * Check the access of Development user
     * @param parameters - N/A
     * @param obj - N/A
     * @return - map contains hasAccess(true/false) depending on method success
     */
    public Object executePreCondition(Object parameters, Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.HAS_ACCESS, Boolean.TRUE)

            // Access check for list, only development user has authority to see sms list
            if (!appSessionUtil.getAppUser().isConfigManager) {
                result.put(Tools.HAS_ACCESS, Boolean.FALSE)
                return result
            }
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.HAS_ACCESS, Boolean.FALSE)
            return result
        }
    }

    /**
     * do nothing for post operation
     */
    public Object executePostCondition(Object parameters, Object obj) {
        return null
    }

    /**
     * Get list of sms by company id
     * @param params - parameters from UI
     * @param obj - N/A
     * @return - a map containing all objects necessary for buildSuccessResultForUI
     * map contains isError(true/false) depending on method success
     */
    @Transactional(readOnly = true)
    public Object execute(Object params, Object obj) {
        Map result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            GrailsParameterMap parameterMap = (GrailsParameterMap) params // cast map returned from UI
            // if url found no param of plugin then set application plugin as default
            String plugin = params.plugin ? params.plugin : 1
            int pluginId = Integer.parseInt(plugin)

            // if plugin id is not desired then redirect to application plugin as default
            if (pluginId >= 10) {
                pluginId = 1
            }
            initPager(parameterMap)
            long companyId = appSessionUtil.getCompanyId()
            int count = smsService.countByCompanyIdAndPluginId(companyId, pluginId)     // get company from sms service
            List smsList = smsService.findAllByCompanyIdAndPluginId(companyId, pluginId)  // get sms list from sms service
            result.put(SMS_LIST, smsList)
            result.put(Tools.COUNT, count)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, SHOW_FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Wrap SMS list for grid
     * @param obj - map returned from execute method
     * @return - a map containing all objects necessary for grid view
     */
    public Object buildSuccessResultForUI(Object obj) {
        Map result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            Map executeResult = (Map) obj
            List smsList = (List) executeResult.get(SMS_LIST)
            int count = (int) executeResult.get(Tools.COUNT)
            List resultList = wrapSmsListInGrid(smsList, start)
            Map output = [page: pageNumber, total: count, rows: resultList]
            return output
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, SHOW_FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Build failure result in case of any error
     * @param obj -map returned from previous methods, can be null
     * @return -a map containing isError = true & relevant error message
     */
    public Object buildFailureResultForUI(Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            if (obj) {
                LinkedHashMap preResult = (LinkedHashMap) obj
                if (preResult.get(Tools.MESSAGE)) {
                    result.put(Tools.MESSAGE, preResult.get(Tools.MESSAGE))
                    return result
                }
            }
            result.put(Tools.MESSAGE, SHOW_FAILURE_MESSAGE)
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, SHOW_FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Wrap list of SMS in grid entity
     * @param smsList - list of sms
     * @param start - starting index of the page
     * @return - list of wrapped SMS
     */
    private List wrapSmsListInGrid(List<Sms> smsList, int start) {
        List lstSms = []
        int counter = start + 1
        for (int i = 0; i < smsList.size(); i++) {
            GridEntity obj = new GridEntity()
            obj.id = smsList[i].id
            obj.cell = [
                    counter,
                    smsList[i].id,
                    smsList[i].transactionCode,
                    Tools.makeDetailsShort(smsList[i].body, Tools.DEFAULT_LENGTH_DETAILS_OF_SMS_BODY), // make shorter the sms body
                    Tools.makeDetailsShort(smsList[i].description, Tools.DEFAULT_LENGTH_DETAILS_OF_SMS_DES), // make shorter the sms description body
                    smsList[i].isActive ? Tools.YES : Tools.NO,
                    smsList[i].isManualSend ? Tools.YES : Tools.NO,
                    smsList[i].controllerName,
                    smsList[i].actionName
            ]
            lstSms << obj
            counter++
        }
        return lstSms
    }
}
