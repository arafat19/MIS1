package com.athena.mis.projecttrack.actions.ptbug

import com.athena.mis.ActionIntf
import com.athena.mis.BaseService
import com.athena.mis.application.entity.AppUser
import com.athena.mis.application.entity.SystemEntity
import com.athena.mis.application.utility.AppUserCacheUtility
import com.athena.mis.projecttrack.entity.*
import com.athena.mis.projecttrack.service.PtBacklogService
import com.athena.mis.projecttrack.service.PtBugService
import com.athena.mis.projecttrack.service.PtSprintService
import com.athena.mis.projecttrack.utility.*
import com.athena.mis.utility.DateUtility
import com.athena.mis.utility.Tools
import grails.transaction.Transactional
import org.apache.log4j.Logger
import org.codehaus.groovy.grails.web.servlet.mvc.GrailsParameterMap
import org.springframework.beans.factory.annotation.Autowired

/**
 * Get total information of a bug
 * For details go through Use-Case doc named 'ShowPtBugDetailsActionService'
 */
class ShowPtBugDetailsActionService extends BaseService implements ActionIntf {

    PtBugService ptBugService
    PtSprintService ptSprintService
    PtBacklogService ptBacklogService
    @Autowired
    PtSessionUtil ptSessionUtil
    @Autowired
    PtProjectCacheUtility ptProjectCacheUtility
    @Autowired
    PtModuleCacheUtility ptModuleCacheUtility
    @Autowired
    PtBugStatusCacheUtility ptBugStatusCacheUtility
    @Autowired
    PtBugTypeCacheUtility ptBugTypeCacheUtility
    @Autowired
    PtBugSeverityCacheUtility ptBugSeverityCacheUtility
    @Autowired
    AppUserCacheUtility appUserCacheUtility


    private final Logger log = Logger.getLogger(getClass())

    private static final String BUG_DETAILS = "bugDetails"
    private static final String DEFAULT_FAILURE_MSG = "Failed to load bug details page"

    /**
     * Do nothing for pre operation
     */
    public Object executePreCondition(Object parameters, Object obj) {
        return null
    }

    /**
     * Do nothing for post operation
     */
    public Object executePostCondition(Object parameters, Object obj) {
        return null
    }

    /**
     * 1. Get Bug object by bug id for html grid
     * @param parameters -serialized parameters from UI
     * @param obj -N/A
     * @return -a map containing all objects necessary for buildSuccessResultForUI
     * map -contains isError(true/false) depending on method success
     */
    @Transactional(readOnly = true)
    public Object execute(Object parameters, Object obj) {
        Map result = new LinkedHashMap();
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            GrailsParameterMap parameterMap = (GrailsParameterMap) parameters
            initPager(parameterMap)                // initialize parameters
            long bugId = Long.parseLong(parameterMap.id.toString())
            PtBug bugObj = ptBugService.read(bugId)
            Map bugDetails = buildBudDetailsMap(bugObj)

            result.put(BUG_DETAILS, bugDetails)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        }
        catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, DEFAULT_FAILURE_MSG)
            return result
        }
    }

    /**
     * @param obj -map returned from execute method
     * @return -a map containing all objects necessary for show page
     * map -contains isError(true/false) depending on method success
     */
    public Object buildSuccessResultForUI(Object obj) {
        Map result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            Map executeResult = (Map) obj                   // cast map returned from execute method

            result.put(BUG_DETAILS, executeResult.get(BUG_DETAILS))
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, DEFAULT_FAILURE_MSG)
            return result
        }
    }

    /**
     * Build failure result in case of any error
     * @param obj -map returned from previous methods, can be null
     * @return -a map containing isError = true & relevant error message to display on page load
     */
    public Object buildFailureResultForUI(Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            if (obj) {
                LinkedHashMap preResult = (LinkedHashMap) obj
                // cast map returned from previous method
                if (preResult.get(Tools.MESSAGE)) {
                    result.put(Tools.MESSAGE, preResult.get(Tools.MESSAGE))
                    return result
                }
            }
            result.put(Tools.MESSAGE, DEFAULT_FAILURE_MSG)
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, DEFAULT_FAILURE_MSG)
            return result
        }
    }
    /**
     * Map of bug details
     * @param bug - bug object
     * @return - a map containing all fields to display bug details
     */
    private Map buildBudDetailsMap(PtBug bug) {
        PtProject project = (PtProject) ptProjectCacheUtility.read(bug.projectId)
        PtModule module = (PtModule) ptModuleCacheUtility.read(bug.moduleId)
        PtSprint sprint = ptSprintService.read(bug.sprintId)
        PtBacklog backlog = ptBacklogService.read(bug.backlogId)
        SystemEntity type = (SystemEntity) ptBugTypeCacheUtility.read(bug.type)
        SystemEntity status = (SystemEntity) ptBugStatusCacheUtility.read(bug.status)
        SystemEntity severity = (SystemEntity) ptBugSeverityCacheUtility.read(bug.severity)
        AppUser createdBy = (AppUser) appUserCacheUtility.read(bug.createdBy)
        AppUser updatedBy = (AppUser) appUserCacheUtility.read(bug.updatedBy)

        Map bugDetails = [
                id: bug.id,
                project:project.name,
                module:module.name,
                sprint:sprint.name,
                actor:backlog.actor,
                purpose:backlog.purpose,
                benefit:backlog.benefit,
                useCaseId:backlog.useCaseId,
                title: bug.title,
                type:type.key,
                status:status.key,
                severity:severity.key,
                stepToReproduce: bug.stepToReproduce,
                createdOn: DateUtility.getDateTimeFormatAsString(bug.createdOn),
                note: bug.note,
                createdBy:createdBy.username,
                updatedBy:updatedBy?updatedBy.username:Tools.EMPTY_SPACE
        ]
        return bugDetails
    }

}
