/**
 * Module Name - Accounting
 * Purpose - Entity of accounting voucher information
 * */

package com.athena.mis.accounting.entity

import com.athena.mis.utility.Tools

class AccVoucher {
    long id                     // primary key (Auto generated by its own sequence)
    int version

    long companyId              // Company.id
    long moduleId               //----------------------
    long voucherTypeId          // SystemEntity.id
    int financialYear           // 2000, 2012
    int financialMonth          // 4 , 11
    boolean isVoucherPosted     // flag to post/Unpost the object
    String note                 // Mandatory
    String traceNo              // AccType Prefix + ddMMyyyy + counter(3 digit) ex: A13062012007 ; counter will reset for each day

    Date voucherDate            // user defined date
    long createdBy              // AppUser.id
    Date createdOn              // Object creation DateTime
    long updatedBy              // AppUser.id
    Date updatedOn              // Object updated DateTime
    long postedBy               // AppUser.id

    double amount               // redundant (sum of Debit/Credit)
    int drCount                 // no of debit entry
    int crCount                 // no of credit entry

    long instrumentTypeId       // SystemEntity.id (e.g. PurchaseOrder, IOU)
    long instrumentId           // PO.id or IOU.id etc.
    String chequeNo             // mandatory for payment or receive voucher to bank
    Date chequeDate             // mandatory if payment or receive voucher to bank

    long projectId              // Project.id
    int voucherCount            // Count of voucher within same date & type

    static mapping = {
        voucherDate type: 'date'
        chequeDate type: 'date'
        id generator: 'sequence', params: [sequence: 'acc_voucher_id_seq']
        amount sqlType: "numeric(16,4)"

        traceNo index: 'acc_voucher_trace_no_idx'
        createdBy index: 'acc_voucher_created_by_idx'
        updatedBy index: 'acc_voucher_updated_by_idx'
        instrumentId index: 'acc_voucher_instrument_id_idx'
        instrumentTypeId index: 'acc_voucher_instrument_type_id_idx'
        companyId index: 'acc_voucher_company_id_idx'
        voucherTypeId index: 'acc_voucher_voucher_type_id_idx'
        voucherDate index: 'acc_voucher_voucher_date_idx'
        projectId index: 'acc_voucher_project_id_idx'
        postedBy index: 'acc_voucher_posted_by_idx'
    }

    static constraints = {
        updatedOn(nullable: true)
        note(nullable: true)
        chequeNo(nullable: true)
        chequeDate(nullable: true)
        companyId(nullable: false)
        projectId(nullable: false)
        voucherCount(nullable: false)
        traceNo unique: 'companyId'
    }

    static namedQueries = {

        searchByVoucherType { long voucherTypeId, String queryType, def query, long companyId ->
            eq('voucherTypeId', voucherTypeId)
            eq('companyId', companyId)
            if (query instanceof String) {
                ilike(queryType, Tools.PERCENTAGE + query + Tools.PERCENTAGE)
            } else {
                eq(queryType, query)
            }
            setReadOnly(true)
        }
    }
}
