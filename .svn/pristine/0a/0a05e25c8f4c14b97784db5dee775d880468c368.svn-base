package com.athena.mis.exchangehouse.actions.customer

import com.athena.mis.ActionIntf
import com.athena.mis.BaseService
import com.athena.mis.application.config.AppSysConfigurationCacheUtility
import com.athena.mis.application.entity.*
import com.athena.mis.application.service.AppMailService
import com.athena.mis.application.service.AppUserEntityService
import com.athena.mis.application.service.AppUserService
import com.athena.mis.application.service.UserRoleService
import com.athena.mis.application.utility.AppUserCacheUtility
import com.athena.mis.application.utility.AppUserEntityTypeCacheUtility
import com.athena.mis.application.utility.RoleCacheUtility
import com.athena.mis.application.utility.RoleTypeCacheUtility
import com.athena.mis.exchangehouse.entity.ExhCustomer
import com.athena.mis.exchangehouse.service.ExhCustomerService
import com.athena.mis.exchangehouse.utility.ExhSessionUtil
import com.athena.mis.exchangehouse.utility.ExhUserCustomerCacheUtility
import com.athena.mis.utility.Tools
import grails.plugins.springsecurity.SpringSecurityService
import org.apache.log4j.Logger
import org.codehaus.groovy.grails.web.mapping.LinkGenerator
import org.codehaus.groovy.grails.web.servlet.mvc.GrailsParameterMap
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.transaction.annotation.Transactional

/**
 *  Create a user account of customer
 *  For details go through Use-Case doc named 'ExhCreateForCustomerUserActionService'
 */
class ExhCreateForCustomerUserActionService extends BaseService implements ActionIntf {
    private final Logger log = Logger.getLogger(getClass());

    private static final String CUSTOMER_USER_SAVE_SUCCESS_MESSAGE = "Customer User has been saved successfully"
    private static final String CUSTOMER_USER_SAVE_FAILURE_MESSAGE = "Customer User could not be saved"
    private static final String CUSTOMER_SAVE_FAILURE_MESSAGE = 'Failed to create Customer'
    private static final String LOGIN_ID_NOT_AVAILABLE = ", login id  is not available."
    private static final String APP_USER_OBJ = "appUser"
    private static final String CUSTOMER_OBJ = "customer"
    private static final String CUSTOMER_NOT_FOUND = "Customer not found"
    private static final String SUCCESS_MAIL_CONFIRMATION = "Activation mail is sent to the customer."
    private static final String ACTIVATION = "activation"
    private static final String EXH_CUSTOMER = 'exhCustomer'
    private static final String USE_CASE = "ExhCreateForCustomerUserActionService"
    private static final String CUSTOMER_DEFAULT_PASSWORD = "southeast@12345"

    LinkGenerator grailsLinkGenerator
    SpringSecurityService springSecurityService
    AppUserService appUserService
    UserRoleService userRoleService
    AppUserEntityService appUserEntityService
    ExhCustomerService exhCustomerService
    AppMailService appMailService

    @Autowired
    AppUserCacheUtility appUserCacheUtility
    @Autowired
    ExhUserCustomerCacheUtility exhUserCustomerCacheUtility
    @Autowired
    RoleCacheUtility roleCacheUtility
    @Autowired
    AppUserEntityTypeCacheUtility appUserEntityTypeCacheUtility
    @Autowired
    ExhSessionUtil exhSessionUtil
    @Autowired
    RoleTypeCacheUtility roleTypeCacheUtility
    @Autowired
    AppSysConfigurationCacheUtility appSysConfigurationCacheUtility

    /**
     * Get params from UI and build appUser object
     * @param params -serialized parameters from UI
     * @param obj -N/A
     * @return -a map containing all objects necessary for execute
     * map contains isError(true/false) depending on method success
     */
    @Transactional(readOnly = true)
    public Object executePreCondition(Object params, Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            GrailsParameterMap parameterMap = (GrailsParameterMap) params
            AppUser appUser = buildAppUser(parameterMap)        // build appUser object
            AppUser duplicateAppUser = appUserCacheUtility.readByLoginId(appUser.loginId)     // find duplicate user from cache utility

            if (duplicateAppUser) {   //  check duplicate user
                String duplicateErrorMsg = appUser.loginId + LOGIN_ID_NOT_AVAILABLE
                result.put(Tools.MESSAGE, duplicateErrorMsg)
                return result
            }

            long customerId = Long.parseLong(parameterMap.customerId.toString())
            ExhCustomer customer = exhCustomerService.read(customerId)      // get customer object
            if (!customer) {         // check whether customer object exists or not
                result.put(Tools.MESSAGE, CUSTOMER_NOT_FOUND)
                return result
            }

            result.put(CUSTOMER_OBJ, customer)
            result.put(APP_USER_OBJ, appUser)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, CUSTOMER_USER_SAVE_FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Save appUser and userRole, appUserEntity object in DB accordingly
     * This method is in transactional block and will roll back in case of any exception
     * @param parameters -N/A
     * @param obj -map returned from executePreCondition method
     * @return -a map containing all objects necessary for executePostCondition
     * map contains isError(true/false) depending on method success
     */
    @Transactional
    public Object execute(Object parameters, Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            LinkedHashMap preResult = (LinkedHashMap) obj   // cast map returned from executePreCondition method
            AppUser appUser = (AppUser) preResult.get(APP_USER_OBJ)
            ExhCustomer customer = (ExhCustomer) preResult.get(CUSTOMER_OBJ)
            appUser.activationLink = springSecurityService.encodePassword(appUser.loginId)

            AppUser newAppUser = appUserService.create(appUser)    // save appUser object in DB
            appUserCacheUtility.add(newAppUser, appUserCacheUtility.SORT_ON_NAME, appUserCacheUtility.SORT_ORDER_ASCENDING)

            Role role = (Role) roleCacheUtility.read(roleTypeCacheUtility.ROLE_TYPE_EXH_CUSTOMER)
            UserRole newUserRole = new UserRole(user: newAppUser, role: role)
            userRoleService.create(newUserRole)   // save user role in DB

            AppUserEntity userCustomer = buildAppUserEntity(newAppUser, customer)  // build appUserEntity
            // now create appUserEntity add cache utility
            AppUserEntity newUserCustomer = appUserEntityService.create(userCustomer) // save new appUserEntity object in DB
            // add new object in cache utility and keep the data sorted
            exhUserCustomerCacheUtility.add(newUserCustomer, exhUserCustomerCacheUtility.SORT_ON_ID, exhUserCustomerCacheUtility.SORT_ORDER_ASCENDING)

            result.put(APP_USER_OBJ, newAppUser)
            result.put(Tools.MESSAGE, CUSTOMER_USER_SAVE_SUCCESS_MESSAGE)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception e) {
            log.error(e.getMessage())
            //@todo:rollback
            throw new RuntimeException(CUSTOMER_SAVE_FAILURE_MESSAGE)
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, CUSTOMER_USER_SAVE_FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * @param parameters -serialized parameters from UI
     * @param obj -map returned from execute method
     * @return -a map containing all objects necessary for UI
     * map contains isError(true/false) depending on method success
     */
    @Transactional(readOnly = true)
    public Object executePostCondition(Object parameters, Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            LinkedHashMap receivedResult = (LinkedHashMap) obj     // cast map returned from execute method
            AppUser appUser = (AppUser) receivedResult.get(APP_USER_OBJ)
            LinkedHashMap paramMap = (LinkedHashMap) parameters
            sendActivationMail(appUser, paramMap)          // sent mail for activation

            result.put(Tools.MESSAGE, SUCCESS_MAIL_CONFIRMATION)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, CUSTOMER_USER_SAVE_FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Show success message
     * @param obj -map from execute method
     * @return -a map containing all objects necessary for UI
     * map contains isError(true/false) depending on method success
     */
    public Object buildSuccessResultForUI(Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            LinkedHashMap executeResult = (LinkedHashMap) obj   // cast map returned from execute method
            result = [isError: executeResult.get(Tools.IS_ERROR),
                    entity: executeResult.get(APP_USER_OBJ),
                    message: executeResult.get(Tools.MESSAGE)];
            return result;
        }
        catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, CUSTOMER_USER_SAVE_FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Build failure result in case of any error
     * @param obj -map returned from previous methods, can be null
     * @return -a map containing isError = true & relevant error message
     */
    public Object buildFailureResultForUI(Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            if (obj) {
                Map preResult = (Map) obj
                result.put(Tools.MESSAGE, preResult.get(Tools.MESSAGE))
            } else {
                result.put(Tools.MESSAGE, CUSTOMER_USER_SAVE_FAILURE_MESSAGE)
            }
            return result
        } catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, CUSTOMER_USER_SAVE_FAILURE_MESSAGE)
            return result
        }
    }
    /**
     * a mail sent to newly created user
     */
    private void sendActivationMail(AppUser appUser, LinkedHashMap paramMap) {
        String link = grailsLinkGenerator.link(controller: EXH_CUSTOMER, action: ACTIVATION, absolute: true, params: [link: appUser.activationLink])  // activation mail link generate
        AppMail appMail = appMailService.findByTransactionCode(USE_CASE)
        Map parameters = [loginId: appUser.loginId, name: appUser.username, password: paramMap.password, link: link]
        appMailService.checkAndSendMailForExchangeHouse(appMail, appUser.loginId, parameters)      // sent mail
    }

    /**
     * Build appUser object
     * @param params -serialized parameters from UI
     * @return -new appUser object
     */
    private AppUser buildAppUser(GrailsParameterMap params) {
        AppUser appUser = new AppUser(params)  // initialize appUser object
        //  although nextExpireDate is set here, it is only effective while create, this value is not reset in Edit mode
        SysConfiguration sysConfig = (SysConfiguration) appSysConfigurationCacheUtility.readByKeyAndCompanyId(appSysConfigurationCacheUtility.DEFAULT_PASSWORD_EXPIRE_DURATION)
        if (sysConfig) {
            appUser.nextExpireDate = new Date() + Integer.parseInt(sysConfig.value)
        } else {
            appUser.nextExpireDate = new Date()
        }
        appUser.companyId = exhSessionUtil.appSessionUtil.getAppUser().companyId
        if (!params.password) {   // check required params, if not
            params.password = CUSTOMER_DEFAULT_PASSWORD   // set default password
        }
        appUser.password = springSecurityService.encodePassword(params.password)
        appUser.createdOn=new Date()
        return appUser
    }

    /**
     * Build appUserEntity object
     * @param newAppUser -a AppUser object
     * @param customer -a ExhCustomer object
     * @return -new appUserEntity object
     */
    private AppUserEntity buildAppUserEntity(AppUser newAppUser, ExhCustomer customer) {
        AppUserEntity appUserEntity = new AppUserEntity()
        appUserEntity.appUserId = newAppUser.id
        appUserEntity.entityId = customer.id
        SystemEntity appUserSysEntityObject = (SystemEntity) appUserEntityTypeCacheUtility.readByReservedAndCompany(appUserEntityTypeCacheUtility.CUSTOMER, exhSessionUtil.appSessionUtil.getCompanyId())
        appUserEntity.entityTypeId = appUserSysEntityObject.id
        return appUserEntity
    }

}

