package com.athena.mis.arms.actions.rmstask

import com.athena.mis.ActionIntf
import com.athena.mis.BaseService
import com.athena.mis.GridEntity
import com.athena.mis.application.entity.SystemEntity
import com.athena.mis.application.utility.CountryCacheUtility
import com.athena.mis.application.utility.CurrencyCacheUtility
import com.athena.mis.arms.entity.RmsExchangeHouse
import com.athena.mis.arms.entity.RmsTask
import com.athena.mis.arms.model.WrapBankDepositTask
import com.athena.mis.arms.service.RmsTaskService
import com.athena.mis.arms.utility.RmsExchangeHouseCacheUtility
import com.athena.mis.arms.utility.RmsPaymentMethodCacheUtility
import com.athena.mis.arms.utility.RmsSessionUtil
import com.athena.mis.arms.utility.RmsTaskStatusCacheUtility
import com.athena.mis.utility.Tools
import grails.transaction.Transactional
import org.apache.log4j.Logger
import org.codehaus.groovy.grails.web.servlet.mvc.GrailsParameterMap
import org.springframework.beans.factory.annotation.Autowired

import javax.servlet.http.HttpServletRequest

/**
 * Create tasks from uploaded .csv file
 * For details go through use-case doc named 'UploadBankDepositTaskActionService'
 */
class UploadBankDepositTaskActionService extends BaseService implements ActionIntf {

    RmsTaskService rmsTaskService
    @Autowired
    RmsExchangeHouseCacheUtility rmsExchangeHouseCacheUtility
    @Autowired
    RmsPaymentMethodCacheUtility rmsPaymentMethodCacheUtility
    @Autowired
    RmsTaskStatusCacheUtility rmsTaskStatusCacheUtility
    @Autowired
    RmsSessionUtil rmsSessionUtil
    @Autowired
    CurrencyCacheUtility currencyCacheUtility
    @Autowired
    CountryCacheUtility countryCacheUtility

    private Logger log = Logger.getLogger(getClass());

    private static final String INVALID_TEMPLATE = "Invalid template"
    private static final String NO_TASK_FOUND = "No tasks found in the CSV file"
    private static final String UPLOAD_FAILED = "Task upload failed"
    private static final String UPLOAD_SUCCESS = "Tasks upload successful"
    private static final String ERROR_TASK_FAILURE = "Following tasks contains error"
    private static final String INVALID_FILE_EXTENSION = "Invalid file extension (.csv expected)"

    private static final String LIST_TASK = "lstTask"
    private static final String TASK_STATUS = "taskStatus"
    private static final String LIST_ERROR_TASK = "lstErrorTasks"
    private static final String GRID_OBJ = "gridObj"
    private static final String DUPLICATE_MSG = "Duplicate Ref No: "

    private static final String FILE_NAME = "taskFile"
    private static final String UTF_8 = 'UTF-8'
    private static final String CSV_EXTENSION = ".csv"
    private static final int BANK_DEPOSIT_TASK_FILE_COLUMN = 12;
    private static final int TASK_UPLOAD_PER_FILE_LIMIT = 200;

    /**
     * build list of WrapCashCollectionTask
     * 1. Parse CSV file
     * 2. check template & validate each task
     * 3. check duplicate refNo
     * @param params - parameters from UI
     * @param obj - N/A
     * @return - Map for execute
     */
    @Transactional(readOnly = true)
    public Object executePreCondition(Object params, Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        GrailsParameterMap parameterMap = (GrailsParameterMap) params
        try {
            result.put(Tools.IS_ERROR, true)

            HttpServletRequest request = (HttpServletRequest) obj
            def uploadedFile = request.getFile(FILE_NAME)

            // check file extension
            String strFileName = uploadedFile.properties.originalFilename.toString()
            if (!isCsvFile(strFileName)) {
                result.put(Tools.MESSAGE, INVALID_FILE_EXTENSION)
                return result
            }

            def csvReader = uploadedFile.inputStream.toCsvReader(['charset': UTF_8, 'separatorChar': Tools.COMA, 'skipLines': 1])

            List<WrapBankDepositTask> tasks = []
            boolean isExhUser = Boolean.FALSE
            long exchangeHouseId = 0L
            if (parameterMap.isExhUser) {
                isExhUser = Boolean.TRUE
            }
            if (isExhUser.booleanValue()) {
                exchangeHouseId = rmsSessionUtil.getUserExchangeHouseId()
            } else {
                exchangeHouseId = Tools.parseLongInput(parameterMap.exchangeHouseId)
            }

            RmsExchangeHouse exchangeHouse = (RmsExchangeHouse) rmsExchangeHouseCacheUtility.read(exchangeHouseId)
            boolean isInvalidTemplate = false
            csvReader.eachLine { tokens ->
                if (tokens.size() != BANK_DEPOSIT_TASK_FILE_COLUMN) {
                    isInvalidTemplate = true
                } else {
                    WrapBankDepositTask wrapBankDepositTask = new WrapBankDepositTask(this)
                    wrapBankDepositTask.parseTokens(tokens, exchangeHouse)
                    tasks << wrapBankDepositTask
                }
            }
            if (isInvalidTemplate) {
                result.put(Tools.MESSAGE, INVALID_TEMPLATE)
                return result
            }


            if (tasks.size() == 0) {
                result.put(Tools.MESSAGE, NO_TASK_FOUND)
                return result
            } else if (tasks.size() > TASK_UPLOAD_PER_FILE_LIMIT) {
                result.put(Tools.MESSAGE, "CSV file exceeds task limit ( ${TASK_UPLOAD_PER_FILE_LIMIT} tasks per file )")
                return result
            }

            List<WrapBankDepositTask> errorTasks
            errorTasks = validateTask(tasks)
            if (errorTasks.size() > 0) {
                result.put(LIST_ERROR_TASK, errorTasks)
                return result
            }

            List dupRefNo
            dupRefNo = checkDuplicateRefNo(tasks)
            if (dupRefNo.size() > 0) {
                result.put(LIST_ERROR_TASK, dupRefNo)
                return result
            }
            long companyId = rmsSessionUtil.appSessionUtil.getCompanyId()
            SystemEntity newTaskStatusObj = (SystemEntity) rmsTaskStatusCacheUtility.readByReservedAndCompany(RmsTaskStatusCacheUtility.NEW_TASK, companyId)
            Long status = newTaskStatusObj.id
            if (isExhUser.booleanValue()) {
                SystemEntity pendingTask = (SystemEntity) rmsTaskStatusCacheUtility.readByReservedAndCompany(rmsTaskStatusCacheUtility.PENDING_TASK, companyId)
                status = pendingTask.id
            }
            result.put(Tools.IS_ERROR, false)
            result.put(TASK_STATUS, status)
            result.put(LIST_TASK, tasks)
            return result

        } catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.IS_ERROR, true)
            result.put(Tools.MESSAGE, UPLOAD_FAILED)
            return result
        }
    }

    /**
     * Save bankDepositTasks to DB
     * @param params N/A
     * @param obj - preResult from executePreCondition
     * @return
     */
    @Transactional
    public Object execute(Object params, Object obj) {
        Map result = new LinkedHashMap()
        try {
            Map preResult = (LinkedHashMap) obj
            List<WrapBankDepositTask> lstTask = (List<WrapBankDepositTask>) preResult.get(LIST_TASK)
            Long taskStatus = (Long) preResult.get(TASK_STATUS)
            boolean success = rmsTaskService.saveBankDepositBulkTasks(lstTask, taskStatus.longValue())
            if (success) {
                result.put(Tools.IS_ERROR, false)
                result.put(Tools.MESSAGE, UPLOAD_SUCCESS)
                return result
            } else {
                result.put(Tools.IS_ERROR, true)
                result.put(Tools.MESSAGE, UPLOAD_FAILED)
                return result
            }

        } catch (Exception ex) {
            log.error(ex.getMessage())
            throw new RuntimeException(UPLOAD_FAILED)
            result.put(Tools.IS_ERROR, true)
            result.put(Tools.MESSAGE, UPLOAD_FAILED)
            return result
        }

    }

    /**
     * do nothing for post condition
     */
    public Object executePostCondition(Object parameters, Object obj) {
        return null
    }

    /**
     * do nothing for post condition
     */
    public Object buildSuccessResultForUI(Object obj) {
        return null
    }

    /**
     * build failure result for UI
     * @param obj
     * @return - Map containing gridObj & lstErrorTasks
     */
    @Transactional(readOnly = true)
    public Object buildFailureResultForUI(Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            Map executeResult = (LinkedHashMap) obj
            result.put(Tools.IS_ERROR, true)

            String message = executeResult.get(Tools.MESSAGE)
            if (message) {
                result.put(Tools.MESSAGE, message)
                return result
            }
            result.put(Tools.MESSAGE, UPLOAD_FAILED)
            List<WrapBankDepositTask> lstErrorTaskDetails = (List<WrapBankDepositTask>) executeResult.get(LIST_ERROR_TASK)
            if ((!lstErrorTaskDetails) || (lstErrorTaskDetails.size() == 0)) {
                return result
            }
            List<Map> lstErrorTask = buildErrorTasks(lstErrorTaskDetails)
            List wrapList = wrapErrorTask(lstErrorTaskDetails)
            Map gridObj = [page: pageNumber, total: wrapList.size(), rows: wrapList]
            result.put(LIST_ERROR_TASK, lstErrorTask)
            result.put(GRID_OBJ, gridObj)
            result.put(Tools.MESSAGE, ERROR_TASK_FAILURE)
            return result
        } catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.IS_ERROR, true)
            result.put(Tools.MESSAGE, UPLOAD_FAILED)
            return result
        }
    }

    /**
     * validate if .csv file
     * @param fileName
     * @return
     */
    private boolean isCsvFile(String fileName) {
        String lowerFileName = fileName.toLowerCase();
        return lowerFileName.endsWith(CSV_EXTENSION);
    }

    /**
     * validate task and build errors
     * @param tasks
     * @return
     */
    private List validateTask(List<WrapBankDepositTask> tasks) {
        List<WrapBankDepositTask> errorTasks = []
        for (WrapBankDepositTask it in tasks) {
            it.validate()
            if (it.errors.size() > 0) {
                errorTasks << it
            }
        }
        return errorTasks
    }

    /**
     * Check if refNo is duplicated
     * 1. check in csv file first
     * 2. check in DB
     * @param tasks
     * @return
     */
    private List checkDuplicateRefNo(List<WrapBankDepositTask> tasks) {
        List allRefNo = []
        List lstDuplicate = []

        for (int i = 0; i < tasks.size(); i++) {
            allRefNo << tasks[i].transactionRefNo
            for (int j = i + 1; j < tasks.size(); j++) {
                if (tasks[i].transactionRefNo == tasks[j].transactionRefNo) {
                    WrapBankDepositTask task = tasks[i]
                    task.errors << DUPLICATE_MSG + tasks[i].transactionRefNo
                    lstDuplicate << task
                }
            }
        }
        if (lstDuplicate.size() > 0) {
            return lstDuplicate
        }
        List<RmsTask> duplicateList = (List<RmsTask>) rmsTaskService.findAllByRefNoInList(allRefNo)
        if (duplicateList.size() > 0) {
            for (int i = 0; i < duplicateList.size(); i++) {
                for (int j = 0; j < tasks.size(); j++) {
                    if (duplicateList[i].refNo.equals(tasks[j].transactionRefNo)) {
                        WrapBankDepositTask task = tasks[j]
                        task.errors << DUPLICATE_MSG + tasks[j].transactionRefNo
                        lstDuplicate << task
                        break
                    }
                }
            }
        }
        return lstDuplicate
    }

    /**
     * wrap list of task for grid
     * @param lstTask
     * @return
     */
    private List wrapErrorTask(List<WrapBankDepositTask> lstTask) {
        List lstWrapTask = []
        int counter = start + 1
        for (int i = 0; i < lstTask.size(); i++) {
            WrapBankDepositTask bankDepositTask = lstTask[i]
            GridEntity obj = new GridEntity()
            obj.id = bankDepositTask.serial
            obj.cell = [
                    counter,
                    bankDepositTask.taskValueDate,
                    bankDepositTask.transactionRefNo,
                    bankDepositTask.beneficiaryName,
                    bankDepositTask.accountNumber,
                    bankDepositTask.currency,
                    bankDepositTask.amount,
                    bankDepositTask.outletName,
                    bankDepositTask.outletBranchName,
                    bankDepositTask.outletDistrictName
            ]
            lstWrapTask << obj
            counter++
        }
        return lstWrapTask
    }

    /**
     * build list of error map for kendoListView
     * @param lstErrorTaskDetails
     * @return
     */
    private List<Map> buildErrorTasks(List<WrapBankDepositTask> lstErrorTaskDetails) {
        List<Map> lstErrorTask = []      // keep only necessary properties

        for (int i = 0; i < lstErrorTaskDetails.size(); i++) {
            List errors = []
            for (int j = 0; j < lstErrorTaskDetails[i].errors.size(); j++) {
                errors << [id: j + 1, name: lstErrorTaskDetails[i].errors[j]]
            }
            lstErrorTaskDetails[i].errors = errors
            lstErrorTask << lstErrorTaskDetails[i].properties
        }
        return lstErrorTask
    }
}
