/**
 * Module Name - Application
 * Purpose - Entity of Application user information
 * */

package com.athena.mis.application.entity

class AppUser {
    long id                  // primary key (Auto generated by its own sequence)
    int version
    String loginId           // user login name (unique)
    String username          // Unique userName
    String password
    boolean enabled          // flag to consider/ignore the object
    boolean hasSignature     // if user has any signature image
    long companyId           // Company.id
    boolean accountExpired   // is account expired or not
    boolean accountLocked    // is account locked or not
    boolean passwordExpired  // is user password expired or not
    boolean isCompanyUser    // is he/she company user or not
    Date nextExpireDate
    String cellNumber        // AppUser cell Number
    String ipAddress         // AppUser IP address
    long employeeId          // Employee.id
    String activationLink    // encoded link id based on loginId
    boolean isActivatedByMail   // check already activated or not
    String passwordResetLink    // encoded link id based on loginId + current time
    Date passwordResetValidity  // valid date time to reset password (valid till 24 hrs after sending request)
    String passwordResetCode    // security code to reset password (sent by mail)
    boolean isPowerUser         // if true then Admin user
    boolean isConfigManager     // if true the development user
    boolean isDisablePasswordExpiration      // by default false; if true then the appUser password will not expire
    long createdBy          // AppUser.id
    Date createdOn          // Object creation DateTime
    long updatedBy = 0L     // AppUser.id
    Date updatedOn          // Object Updated DateTime

    static constraints = {
        loginId(unique: true)
        cellNumber (nullable: true)
        ipAddress(nullable: true)
        activationLink(nullable: true)
        passwordResetLink(nullable: true)
        passwordResetValidity(nullable: true)
        passwordResetCode(nullable: true)
        createdBy(nullable: false)
        createdOn(nullable: false)
        updatedBy(nullable: false)
        updatedOn(nullable: true)
    }

    static mapping = {
        id generator: 'sequence', params: [sequence: 'app_user_id_seq']
        loginId index: 'app_user_login_id_idx'
        companyId index: 'app_user_company_id_idx'
        employeeId index: 'app_user_employee_id_idx'
        username index: 'app_user_username_idx'
        createdBy index: 'app_user_created_by_idx'
        updatedBy index: 'app_user_updated_by_idx'
        // todo activationLink index
    }

    Set<Role> getAuthorities() {
        UserRole.findAllByUser(this,[readOnly:true]).collect { it.role} as Set
    }

    public String toString() {
        return this.username;
    }
}

