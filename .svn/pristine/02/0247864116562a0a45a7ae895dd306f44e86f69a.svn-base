<script language="javascript">
    var sprintBackLogListModel = false;
    var dropDownModule, dropDownBackLog, sprintId;

    $(document).ready(function () {
        onLoadSprintBackLogPage();
    });

    // method called on page load
    function onLoadSprintBackLogPage() {

        initializeForm($("#sprintBackLogForm"), onSubmitSprintBackLog);
        $('.download_icon_set').hide();

        $('#printPdfBtn').click(function () {
            downloadSprintDetails();
        });

        var output =${output ? output : ''};
        if (output.isError) {
            showError(output.message);  // show error message in case of error
        } else {
            sprintBackLogListModel = output.gridObj;    // set data in a global variable to populate
        }

        $('#moduleId').kendoDropDownList({
            dataTextField: "name",
            dataValueField: "id",
            dataSource: output.lstModule
        });
        dropDownModule = $('#moduleId').data("kendoDropDownList");

        $('#backLogId').kendoDropDownList({
            dataTextField: "idea",
            dataValueField: "id"
        });
        dropDownBackLog = $('#backLogId').data("kendoDropDownList");
        dropDownBackLog.setDataSource(getKendoEmptyDataSource(dropDownBackLog));

        $('#name').text(output.name);
        sprintId = output.sprintId;
        initFlex();
        populateFlex1();

        // update page title

        $(document).attr('title', "MIS - Create Sprint BackLog");
        loadNumberedMenu(MENU_ID_PROJECT_TRACK, "#ptSprint/show");
    }

    // check pre condition before submitting the form
    function executePreCondition() {
        if(dropDownModule.value()==''){
            showError('Please select a module.')
            return false;
        }

        if(dropDownBackLog.value()==''){
            showError('Please select a backlog.')
            return false;
        }
        // validate form data
        if (!validateForm($("#sprintBackLogForm"))) {
            return false;
        }
        return true;
    }

    // method called  on submit of the form
    function onSubmitSprintBackLog() {
        if (executePreCondition() == false) {
            return false;
        }
        var params = "?sprintId=" + sprintId;

        setButtonDisabled($('#create'), true);    // disable the save button
        showLoadingSpinner(true);   // show loading spinner
        var actionUrl = "${createLink(controller:'ptBacklog', action: 'createBackLogForSprint')}" + params;

        // fire ajax method
        jQuery.ajax({
            type: 'post',
            data: jQuery("#sprintBackLogForm").serialize(),  // serialize data from UI and send as parameter
            url: actionUrl,
            success: function (data, textStatus) {
                executePostCondition(data);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
            },
            complete: function (XMLHttpRequest, textStatus) {
                setButtonDisabled($('#create'), false);   // enable the save button
                showLoadingSpinner(false);  // stop loading spinner
            },
            dataType: 'json'
        });
        return false;
    }

    // execute post condition after create or update
    function executePostCondition(result) {
        if (result.isError) {
            showError(result.message);  // show error message in case of error
            showLoadingSpinner(false);  // stop loading spinner
        } else {
            try {
                var newEntry = result;
                if ($('#id').val().isEmpty() && newEntry.entity != null) { // show newly created object in a grid row

                    var previousTotal = parseInt(sprintBackLogListModel.total);
                    var firstSerial = 1;

                    if (sprintBackLogListModel.rows.length > 0) {
                        firstSerial = sprintBackLogListModel.rows[0].cell[0];
                        regenerateSerial($(sprintBackLogListModel.rows), 0);
                    }
                    newEntry.entity.cell[0] = firstSerial;

                    sprintBackLogListModel.rows.splice(0, 0, newEntry.entity);

                    if ($('#flex1').countEqualsResultPerPage(previousTotal)) {
                        sprintBackLogListModel.rows.pop();
                    }

                    sprintBackLogListModel.total = ++previousTotal;
                    $("#flex1").flexAddData(sprintBackLogListModel);

                } else if (newEntry.entity != null) { // updated existing object data in the grid
                    updateListModel(sprintBackLogListModel, newEntry.entity, 0);
                    $("#flex1").flexAddData(sprintBackLogListModel);
                }
                showSuccess(result.message);    // show success message
                dropDownBackLog.value('');
                dropDownBackLog.setDataSource(result.backLogList);

            } catch (e) {
                // Do Nothing
            }
        }
    }

    // reset the form
    function resetForm() {
        clearForm($("#sprintBackLogForm"), dropDownModule);
        $("#create").html("<span class='k-icon k-i-plus'></span>Add");   // reset create button text
    }

    // initialize the grid
    function initFlex() {
        $("#flex1").flexigrid
        (
                {
                    url: false,
                    dataType: 'json',
                    colModel: [
                        {display: "Serial", name: "serial", width: 50, sortable: false, align: "right", hide:true},
                        {display: "Id", name: "id", width: 50, sortable: false, align: "right"},
                        {display: "Module", name: "module.code", width: 80, sortable: true, align: "left"},
                        {display: "Priority", name: "priority", width: 60, sortable: false, align: "left"},
                        {display: "I want to", name: "purpose", width: 300, sortable: false, align: "left"},
                        {display: "So that", name: "benefit", width: 290, sortable: false, align: "left"},
                        {display: "A.C. count", name: "count", width: 65, sortable: false, align: "right"},
                        {display: "Created By", name: "username", width: 150, sortable: false, align: "left"}
                    ],
                    buttons: [
                        <app:ifAllUrl urls="/ptBacklog/deleteBackLogForSprint">
                        {name: 'Remove', bclass: 'delete', onpress: deleteTask},
                        </app:ifAllUrl>
                        <app:ifAllUrl urls="/ptAcceptanceCriteria/show">
                        {name: 'Acceptance Criteria', bclass: 'note', onpress: loadAcceptanceCriteria},
                        </app:ifAllUrl>
                        {name: 'Report', bclass: 'report', onpress: showTaskDetails},
                        {name: 'Clear Results', bclass: 'clear-results', onpress: reloadGrid},
                        {separator: true}
                    ],
                    searchitems: [
                        {display: "Idea", name: "idea", width: 180, sortable: true, align: "left"}

                    ],
                    sortname: "module.code",
                    sortorder: "asc",
                    usepager: true,
                    singleSelect: true,
                    title: 'All Back Logs',
                    useRp: true,
                    rp: 15,
                    showTableToggleBtn: false,
                    height: getGridHeight() - 20,
                    afterAjax: function (XMLHttpRequest, textStatus) {
                        afterAjaxError(XMLHttpRequest, textStatus);
                        showLoadingSpinner(false);
                    },
                    preProcess: onLoadListJSON
                }
        );
    }
    // reload grid
    function reloadGrid(com, grid) {
        $('#flex1').flexOptions({query: ''}).flexReload();
    }

    // load acceptance criteria for selected backlog
    function loadAcceptanceCriteria(com, grid) {
        if (executeCommonPreConditionForSelect($('#flex1'), 'Backlog') == false) {
            return;
        }
        showLoadingSpinner(true);
        var backlogId = getSelectedIdFromGrid($('#flex1'));
        var loc = "${createLink(controller: 'ptAcceptanceCriteria', action: 'show')}?backlogId=" + backlogId + "&leftMenu=" + 'ptSprint/show';
        $.history.load(formatLink(loc));
        return false;
    }

    // custom populate the grid
    function onLoadListJSON(data) {
        if (data.isError) {
            showError(data.message);
            sprintBackLogListModel = null;
        } else {
            sprintBackLogListModel = data;
        }
        return data;
    }

    // delete sprintBacklog object
    function deleteTask(com, grid) {
        if (executePreConditionForDelete() == false) {
            return;
        }
        showLoadingSpinner(true);
        var backLogId = getSelectedIdFromGrid($('#flex1'));

        $.ajax({
            url: "${createLink(controller:'ptBacklog', action:  'deleteBackLogForSprint')}?id=" + backLogId,
            success: executePostConditionForDelete,
            complete: function (XMLHttpRequest, textStatus) {
                showLoadingSpinner(false);
            },
            dataType: 'json',
            type: 'post'
        });
    }

    // execute pre condition for delete
    function executePreConditionForDelete() {
        if (executeCommonPreConditionForSelect($('#flex1'), 'backlog') == false) {
            return false;
        }

        if (!confirm('Are you sure you want to delete the selected backlog?')) {
            return false;
        }
        return true;
    }

    <%-- removing selected row  --%>
    function executePostConditionForDelete(data) {
        if (data.isError == true) {
            showError(data.message);
        } else {
            var selectedRow = null;
            $('.trSelected', $('#flex1')).each(function (e) {
                selectedRow = $(this).remove();
            });

            $('#flex1').decreaseCount(1);
            sprintBackLogListModel.total = parseInt(sprintBackLogListModel.total) - 1;
            removeEntityFromGridRows(sprintBackLogListModel, selectedRow);
            if(dropDownModule.value()== data.moduleId){
                dropDownBackLog.setDataSource(data.dropDownBackLog);
            }
            showSuccess(data.message);
        }
    }

    // select ptSprint object for update
    function selectSprint(com, grid) {

        var ids = $('.trSelected', grid);
        if (executePreConditionForEdit(ids) == false) {
            return;
        }

        resetForm();
        showLoadingSpinner(true);
        var id = $(ids[ids.length - 1]).attr('id').replace('row', '');
        $.ajax({
            url: "${createLink(controller:'ptSprint', action: 'select')}?id=" + id,
            success: executePostConditionForEdit,
            complete: function (XMLHttpRequest, textStatus) {
                showLoadingSpinner(false);
            },
            dataType: 'json',
            type: 'post'
        });
    }

    // execute pre condition before edit
    function executePreConditionForEdit(ids) {
        if (ids.length == 0) {
            showError("Please select a ptSprint to edit");
            return false;
        }
        return true;
    }

    // execute post condition for edit
    function executePostConditionForEdit(data) {
        if (data.isError) {
            showError(data.message);
        } else {
            showSprint(data);
        }
    }

    // show property of ptSprint object on UI
    function showSprint(data) {
        var entity = data.entity;
        $('#id').val(entity.id);
        $('#version').val(entity.version);
        $('#sprintId').val(entity.sprintId);
        $('#name').text(data.name);
        dropDownBackLog.value(entity.backLogId);
        $("#create").html("<span class='k-icon k-i-plus'></span>Update");   // change create button text to update
    }

    // set link to grid url to populate data
    function populateFlex1() {
        var strUrl = "${createLink(controller:'ptBacklog',action:  'listBackLogForSprint')}?sprintId=" + sprintId;
        $("#flex1").flexOptions({url: strUrl});
        if (sprintBackLogListModel.total > 0) {
            $('.download_icon_set').show();
        }
        if (sprintBackLogListModel) {
            $("#flex1").flexAddData(sprintBackLogListModel);
        }
    }

    function updateBacklog() {
        var moduleId = dropDownModule.value();
        dropDownBackLog.value('');
        dropDownBackLog.setDataSource(getKendoEmptyDataSource(dropDownBackLog, null));
        if (moduleId == '') {
            return;
        }
        showLoadingSpinner(true);
        $.ajax({
            url: "${createLink(controller:'ptBacklog', action: 'backlogListForModule')}?moduleId=" + moduleId,
            success: function (data) {
                if (data.isError) {
                    showError(data.message);
                    dropDownBackLog.setDataSource(getKendoEmptyDataSource(dropDownBackLog, null));
                } else {
                    dropDownBackLog.setDataSource(data.backlogList);
                }
            }, complete: onCompleteAjaxCall,
            dataType: 'json',
            type: 'post'
        });
    }

    function showTaskDetails(com, grid) {
        if (executeCommonPreConditionForSelect($('#flex1'), 'task') == false) {
            return;
        }
        showLoadingSpinner(true);
        var backlogId = getSelectedIdFromGrid($('#flex1'));
        var loc = "${createLink(controller: 'ptReport', action: 'showForBacklogDetails')}?backlogId=" + backlogId + "&leftMenu=" + '#ptSprint/show';
        $.history.load(formatLink(loc));

        return false;
    }

    // method call for download
    function downloadSprintDetails() {
        showLoadingSpinner(true);
        var params = "?sprintId=" + sprintId + "&forAll=" + true;
        if (confirm('Do you want to download the PDF now?')) {
            var url = "${createLink(controller: 'ptReport', action: 'downloadSprintDetails')}" + params;
            document.location = url;
        }
        showLoadingSpinner(false);
        return false;
    }

</script>
