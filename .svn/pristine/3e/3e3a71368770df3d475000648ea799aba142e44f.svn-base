package com.athena.mis.budget.actions.budgtask

import com.athena.mis.ActionIntf
import com.athena.mis.BaseService
import com.athena.mis.budget.entity.BudgTask
import com.athena.mis.budget.service.BudgTaskService
import com.athena.mis.utility.Tools
import org.apache.log4j.Logger
import org.codehaus.groovy.grails.web.servlet.mvc.GrailsParameterMap
import org.springframework.transaction.annotation.Transactional

/**
 * Delete budget task object from DB
 * For details go through Use-Case doc named 'DeleteBudgTaskActionService'
 */
class DeleteBudgTaskActionService extends BaseService implements ActionIntf {

    BudgTaskService budgTaskService

    private static final String DELETED = "deleted"
    private static final String BUDG_TASK_OBJ = "budgTask"
    private static final String OBJ_NOT_FOUND_MASSAGE = "Selected budget task not found"
    private static final String DELETE_FAILURE_MESSAGE = "Budget task could not be deleted"
    private static final String DELETE_SUCCESS_MESSAGE = "Budget task has been deleted successfully"

    private final Logger log = Logger.getLogger(getClass())

    /**
     * Checking pre condition for deleting the budget task object
     * 1. Get budget task id from params
     * 2. Checking input validity by budget task id
     * 3. Get budget task  object by budgTask id
     * 4. Check the existence of BudgTask object
     * @param parameters - serialized parameters from UI
     * @param obj - N/A
     * @return - a map containing all objects necessary for execute
     * map contains isError(true/false) depending on method success
     */
    @Transactional(readOnly = true)
    public Object executePreCondition(Object parameters, Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)

            GrailsParameterMap params = (GrailsParameterMap) parameters
            long budgTaskId = Long.parseLong(params.id.toString())

            BudgTask budgTaskObj = budgTaskService.read(budgTaskId)
            if (!budgTaskObj) { // check budgTask object existence
                result.put(Tools.MESSAGE, OBJ_NOT_FOUND_MASSAGE)
                return result
            }
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            result.put(BUDG_TASK_OBJ, budgTaskObj)
            return result
        } catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, DELETE_FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * do nothing for post operation
     */
    public Object executePostCondition(Object parameters, Object obj) {
        return null
    }

    /**
     * Delete budget task object from DB
     * 1. This function is in transactional boundary and will roll back in case of any exception
     * 2. Delete budget task from DB by using delete method of budgTaskService
     * @param params - N/A
     * @param obj -  map returned from executePreCondition method
     * @returna - map containing all necessary objects
     * map contains isError(true/false) depending on method success
     */
    @Transactional
    public Object execute(Object params, Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            LinkedHashMap preResult = (LinkedHashMap) obj
            BudgTask budgTask = (BudgTask) preResult.get(BUDG_TASK_OBJ)
            Boolean deleteStatus = budgTaskService.delete(budgTask.id)
            if (!deleteStatus.booleanValue()) {
                result.put(Tools.MESSAGE, DELETE_FAILURE_MESSAGE)
                return result
            }
            decreaseTaskCountForBudget(budgTask.budgetId)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, DELETE_FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Remove object from grid
     * Show success message
     * @param obj - N/A
     * @return - a map containing success message for UI
     */
    public Object buildSuccessResultForUI(Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(DELETED, Boolean.TRUE.booleanValue())
            result.put(Tools.MESSAGE, DELETE_SUCCESS_MESSAGE)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, DELETE_FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Build failure result in case of any error
     * @param obj -map returned from previous methods, can be null
     * @return -a map containing isError = true & relevant error message
     */
    public Object buildFailureResultForUI(Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            if (obj) {
                LinkedHashMap preResult = (LinkedHashMap) obj
                if (preResult.message) {
                    result.put(Tools.MESSAGE, preResult.get(Tools.MESSAGE))
                    return result
                }
            }
            result.put(Tools.MESSAGE, DELETE_FAILURE_MESSAGE)
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, DELETE_FAILURE_MESSAGE)
            return result
        }
    }

    private static final String UPDATE_QUERY = """
        UPDATE budg_budget SET
            task_count = task_count - 1,
            version= version + 1
        WHERE
            id=:budgetId
        """

    /**
     * Task number increase by sql query
     * @param budgetId - budget id comes from execute method
     * @return - an integer updateCount
     */
    private int decreaseTaskCountForBudget(long budgetId) {
        Map queryParams = [budgetId: budgetId]
        int updateCount = executeUpdateSql(UPDATE_QUERY, queryParams)
        if (updateCount <= 0) {
            throw new RuntimeException('Error occurred while update task count')
        }
        return updateCount
    }
}
