package com.athena.mis.sarb.actions.taskmodel

import com.athena.mis.ActionIntf
import com.athena.mis.BaseService
import com.athena.mis.GridEntity
import com.athena.mis.application.entity.SystemEntity
import com.athena.mis.integration.exchangehouse.ExchangeHousePluginConnector
import com.athena.mis.sarb.utility.SarbSessionUtil
import com.athena.mis.sarb.utility.SarbTaskReviseStatusCacheUtility
import com.athena.mis.utility.DateUtility
import com.athena.mis.utility.Tools
import grails.transaction.Transactional
import groovy.sql.GroovyRowResult
import org.apache.log4j.Logger
import org.codehaus.groovy.grails.web.servlet.mvc.GrailsParameterMap
import org.springframework.beans.factory.annotation.Autowired

/**
 * list replace task for send to sarb
 * for details go through use-case named "ListReplaceTaskForSendToSarbActionService"
 */
class ListReplaceTaskForSendToSarbActionService extends BaseService implements ActionIntf {

    @Autowired
    SarbSessionUtil sarbSessionUtil
    @Autowired
    ExchangeHousePluginConnector exchangeHouseImplService
    @Autowired
    SarbTaskReviseStatusCacheUtility sarbTaskReviseStatusCacheUtility

    private final Logger log = Logger.getLogger(getClass())

    private static final String LOAD_FAILED = "Failed to load task lists."
    private static final String LST_TASK = "lstTask"

    /**
     * Do nothing for executePreCondition
     */
    public Object executePreCondition(Object parameters, Object obj) {
        return null
    }
    /**
     * Do nothing for executePostCondition
     */
    public Object executePostCondition(Object parameters, Object obj) {
        return null
    }
    /**
     * Get parameters from UI
     * @param parameters
     * @param obj -N/A
     * @return list and count
     */
    @Transactional(readOnly = true)
    public Object execute(Object parameters, Object obj) {
        Map result = new LinkedHashMap()
        try {
            GrailsParameterMap params = (GrailsParameterMap) parameters
            initPager(params)
            long companyId = sarbSessionUtil.appSessionUtil.getCompanyId()
            List<Long> lstTaskStatus = exchangeHouseImplService.listTaskStatusForSarb() //Ids of send to Bank, Send to other bank, Resolved by other bank
            SystemEntity movedForReplace = (SystemEntity) sarbTaskReviseStatusCacheUtility.readByReservedAndCompany(SarbTaskReviseStatusCacheUtility.MOVED_FOR_REPLACE, companyId)
            List<GroovyRowResult> lstSarbTaskModel = listTaskForReplace(lstTaskStatus, movedForReplace.id, this)
            int count = countTaskForReplace(lstTaskStatus, movedForReplace.id)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            result.put(LST_TASK, lstSarbTaskModel)
            result.put(Tools.COUNT, count)
            return result

        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, LOAD_FAILED)
            return result
        }
    }
    /**
     * Wrap sarb task details list for grid
     * @param obj -map returned from execute method
     * @return -a map containing all objects necessary for grid view
     */
    public Object buildSuccessResultForUI(Object obj) {
        Map result = new LinkedHashMap()
        try {
            Map executeResult = (Map) obj
            List<GroovyRowResult> lstSarbTask = (List<GroovyRowResult>) executeResult.get(LST_TASK)
            int count = (int) executeResult.get(Tools.COUNT)
            List wrappedSarbTaskModel = wrapListSarbTaskModel(lstSarbTask, start)
            Map output = [page: pageNumber, total: count, rows: wrappedSarbTaskModel]
            return output
        }
        catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, LOAD_FAILED)
            return result
        }
    }

    /**
     * Do nothing
     */
    public Object buildFailureResultForUI(Object obj) {
        return null
    }
    /**
     * Wrap list of sarb task in grid entity
     * @param lstSarbTaskModel -list of  object(s)
     * @param start -starting index of the page
     * @return -list of wrapped objects
     */
    private List wrapListSarbTaskModel(List<GroovyRowResult> lstSarbTaskModel, int start) {
        List SarbTaskModelList = []
        int counter = start + 1
        for (int i = 0; i < lstSarbTaskModel.size(); i++) {
            GridEntity obj = new GridEntity()
            obj.id = lstSarbTaskModel[i].id
            obj.cell = [
                    counter,
                    lstSarbTaskModel[i].id,
                    lstSarbTaskModel[i].ref_no,
                    lstSarbTaskModel[i].amount_in_foreign_currency,
                    lstSarbTaskModel[i].amount_in_local_currency,
                    lstSarbTaskModel[i].customer_name,
                    lstSarbTaskModel[i].beneficiary_name,
                    DateUtility.getLongDateForUI(lstSarbTaskModel[i].created_on)
            ]
            SarbTaskModelList << obj
            counter++
        }
        return SarbTaskModelList
    }

    /**
     * list All task matching criteria:
     * 1. Task status= send to Bank/ Send to other bank/ Resolved by other bank
     * 2. Last record of SarbTaskDetails where reviseStatusId=(Moved For Replace) && enabled = false
     */
    private List<GroovyRowResult> listTaskForReplace(List<Long> lstTaskStatus, long movedForReplaceId, BaseService baseService) {
        String strTaskStatus = Tools.buildCommaSeparatedStringOfIds(lstTaskStatus)
        String query = """
            SELECT t.id,t.ref_no, t.amount_in_foreign_currency, t.amount_in_local_currency, t.customer_name, t.beneficiary_name, t.created_on
            FROM exh_task t
            LEFT join sarb_task_details st
            ON t.id = st.task_id  AND st.id = (SELECT MAX(sarb_task_details.id) FROM sarb_task_details WHERE sarb_task_details.task_id = t.id)
            WHERE t.current_status IN (${strTaskStatus})
            AND st.enabled=false
            AND st.revise_status = :reviseStatus
            limit :resultPerPage
            OFFSET :start
        """
        Map queryParams = [
                reviseStatus: movedForReplaceId,
                resultPerPage: baseService.resultPerPage,
                start: baseService.start
        ]
        List<GroovyRowResult> lstTaskForCancel = executeSelectSql(query, queryParams)
        return lstTaskForCancel
    }

    /**
     * Count All task matching criteria:
     * 1. Task status= send to Bank/ Send to other bank/ Resolved by other bank
     * 2. Last record of SarbTaskDetails where reviseStatusId=(Moved For Replace) && enabled = false
     */
    private int countTaskForReplace(List<Long> lstTaskStatus, long movedForReplaceId) {
        String strTaskStatus = Tools.buildCommaSeparatedStringOfIds(lstTaskStatus)
        String query = """
            SELECT COUNT(t.id)
            FROM exh_task t
            LEFT join sarb_task_details st ON t.id = st.task_id
            AND st.id = (SELECT MAX(sarb_task_details.id) FROM sarb_task_details WHERE sarb_task_details.task_id = t.id)
            WHERE t.current_status IN (${strTaskStatus})
            AND st.enabled=false AND st.revise_status = :reviseStatus
        """
        Map queryParams = [reviseStatus: movedForReplaceId]
        List<GroovyRowResult> resultList = executeSelectSql(query, queryParams)
        int count = (int) resultList[0][0]
        return count
    }

}
