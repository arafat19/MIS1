package com.athena.mis.arms.actions.rmspurchaseinstrumentmapping

import com.athena.mis.ActionIntf
import com.athena.mis.BaseService
import com.athena.mis.GridEntity
import com.athena.mis.application.entity.Bank
import com.athena.mis.application.entity.BankBranch
import com.athena.mis.application.entity.District
import com.athena.mis.application.entity.SystemEntity
import com.athena.mis.application.utility.BankBranchCacheUtility
import com.athena.mis.application.utility.BankCacheUtility
import com.athena.mis.application.utility.DistrictCacheUtility
import com.athena.mis.arms.entity.RmsPurchaseInstrumentMapping
import com.athena.mis.arms.service.RmsPurchaseInstrumentMappingService
import com.athena.mis.arms.utility.RmsInstrumentTypeCacheUtility
import com.athena.mis.utility.Tools
import grails.transaction.Transactional
import org.apache.log4j.Logger
import org.codehaus.groovy.grails.web.servlet.mvc.GrailsParameterMap
import org.springframework.beans.factory.annotation.Autowired

class UpdateRmsPurchaseInstrumentMappingActionService extends BaseService implements ActionIntf {

    RmsPurchaseInstrumentMappingService rmsPurchaseInstrumentMappingService
    @Autowired
    RmsInstrumentTypeCacheUtility rmsInstrumentTypeCacheUtility
    @Autowired
    BankCacheUtility bankCacheUtility
    @Autowired
    BankBranchCacheUtility bankBranchCacheUtility
    @Autowired
    DistrictCacheUtility districtCacheUtility

    private final Logger log = Logger.getLogger(getClass())

    private static final String OBJ_NOT_FOUND = "Selected purchase instrument not found"
    private static final String INSTRUMENT_MAPPING_OBJ = "instrumentMappingObj"
    private static final String UPDATE_FAILURE_MESSAGE = "Purchase instrument mapping could not be updated"
    private static final String UPDATE_SUCCESS_MESSAGE = "Purchase instrument mapping has been updated successfully"
    private final static String EXIST_MESSAGE = "Purchase instrument mapping already exists"

    /**
     * Get parameters from UI and build RmsPurchaseInstrumentMapping object for update
     * 1. Check validity for input
     * 2. Check existence of RmsPurchaseInstrumentMapping object
     * 3. Build RmsPurchaseInstrumentMapping object with new parameters
     * 4. Check existence of name
     * 5. Check existence of code
     * @param parameters -serialized parameters from UI
     * @param obj -N/A
     * @return -a map containing all objects necessary for execute
     * map contains isError(true/false) depending on method success
     */
    @Transactional(readOnly = true)
    Object executePreCondition(Object parameters, Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            GrailsParameterMap parameterMap = (GrailsParameterMap) parameters
            if (!parameterMap.id) {
                result.put(Tools.MESSAGE, Tools.ERROR_FOR_INVALID_INPUT)
                return result
            }
            long purchaseInstrumentMappingId = Long.parseLong(parameterMap.id)
            RmsPurchaseInstrumentMapping purchaseInstrumentMapping = rmsPurchaseInstrumentMappingService.read(purchaseInstrumentMappingId)
            if (!purchaseInstrumentMapping) {
                result.put(Tools.MESSAGE, OBJ_NOT_FOUND)
                return result
            }
            RmsPurchaseInstrumentMapping rmsPurchaseInstrumentMapping = buildRmsPurchaseInstrumentMappingObject(parameterMap, purchaseInstrumentMapping)
            int mapping = rmsPurchaseInstrumentMappingService.countExistingMappingForUpdate(purchaseInstrumentMapping.bankBranchId, purchaseInstrumentMapping.instrumentTypeId, rmsPurchaseInstrumentMapping.id)
            if (mapping > 0) {
                result.put(Tools.MESSAGE, EXIST_MESSAGE)
                return result
            }
            result.put(INSTRUMENT_MAPPING_OBJ, rmsPurchaseInstrumentMapping)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception e) {
            log.error(e.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, UPDATE_FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Do nothing for post operation
     */
    Object executePostCondition(Object parameters, Object obj) {
        return null
    }

    /**
     * Update RmsPurchaseInstrumentMapping object in DB
     * @param parameters -N/A
     * @param obj -map returned from executePreCondition method
     * @return -a map containing all objects necessary for buildSuccessResultForUI
     * map contains isError(true/false) depending on method success
     */
    @Transactional
    Object execute(Object parameters, Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            LinkedHashMap preResult = (LinkedHashMap) obj
            RmsPurchaseInstrumentMapping purchaseInstrumentMapping = (RmsPurchaseInstrumentMapping) preResult.get(INSTRUMENT_MAPPING_OBJ)
            rmsPurchaseInstrumentMappingService.update(purchaseInstrumentMapping)
            result.put(INSTRUMENT_MAPPING_OBJ, purchaseInstrumentMapping)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, UPDATE_FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Build grid object to show a single row (updated object) in grid
     * 1. Get country object by id
     * 2. build success message
     * @param obj -map returned from execute method
     * @return -a map containing all objects necessary to indicate success event
     * map contains isError(true/false) depending on method success
     */
    Object buildSuccessResultForUI(Object obj) {
        Map result = new LinkedHashMap()
        try {
            LinkedHashMap executeResult = (LinkedHashMap) obj
            RmsPurchaseInstrumentMapping purchaseInstrumentMapping = (RmsPurchaseInstrumentMapping) executeResult.get(INSTRUMENT_MAPPING_OBJ)
            SystemEntity instrument = (SystemEntity) rmsInstrumentTypeCacheUtility.read(purchaseInstrumentMapping.instrumentTypeId)
            Bank bank = (Bank) bankCacheUtility.read(purchaseInstrumentMapping.bankId)
            BankBranch bankBranch = (BankBranch) bankBranchCacheUtility.read(purchaseInstrumentMapping.bankBranchId)
            District district = (District) districtCacheUtility.read(purchaseInstrumentMapping.districtId)
            GridEntity object = new GridEntity()
            object.id = purchaseInstrumentMapping.id
            object.cell = [
                    Tools.LABEL_NEW,
                    instrument ? instrument.key : Tools.EMPTY_SPACE,
                    bank? bank.name : Tools.EMPTY_SPACE,
                    bankBranch? bankBranch.name : Tools.EMPTY_SPACE,
                    district? district.name : Tools.EMPTY_SPACE
            ]
            result.put(Tools.MESSAGE, UPDATE_SUCCESS_MESSAGE)
            result.put(Tools.ENTITY, object)
            result.put(Tools.VERSION, purchaseInstrumentMapping.version)
            result.put(Tools.IS_ERROR, Boolean.FALSE)
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, UPDATE_FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Build failure result in case of any error
     * @param obj -map returned from previous methods, can be null
     * @return -a map containing isError = true & relevant error message
     */
    Object buildFailureResultForUI(Object obj) {
        LinkedHashMap result = new LinkedHashMap()
        try {
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            if (obj) {
                LinkedHashMap preResult = (LinkedHashMap) obj                       // cast map returned from previous method
                if (preResult.get(Tools.MESSAGE)) {
                    result.put(Tools.MESSAGE, preResult.get(Tools.MESSAGE))
                    return result
                }
            }
            result.put(Tools.MESSAGE, UPDATE_FAILURE_MESSAGE)
            return result
        } catch (Exception ex) {
            log.error(ex.getMessage())
            result.put(Tools.IS_ERROR, Boolean.TRUE)
            result.put(Tools.MESSAGE, UPDATE_FAILURE_MESSAGE)
            return result
        }
    }

    /**
     * Make existing/old object Up-to-date with new parameters
     * @param parameterMap -serialized parameters from UI
     * @param rmsPurchaseInstrumentMapping -old RmsPurchaseInstrumentMapping object
     * @return -updated RmsPurchaseInstrumentMapping object
     */
    private RmsPurchaseInstrumentMapping buildRmsPurchaseInstrumentMappingObject(GrailsParameterMap parameterMap, RmsPurchaseInstrumentMapping rmsPurchaseInstrumentMapping) {
        RmsPurchaseInstrumentMapping purchaseInstrumentMapping = new RmsPurchaseInstrumentMapping(parameterMap)
        rmsPurchaseInstrumentMapping.bankId = purchaseInstrumentMapping.bankId
        rmsPurchaseInstrumentMapping.bankBranchId = purchaseInstrumentMapping.bankBranchId
        rmsPurchaseInstrumentMapping.districtId = purchaseInstrumentMapping.districtId
        rmsPurchaseInstrumentMapping.instrumentTypeId = purchaseInstrumentMapping.instrumentTypeId
        rmsPurchaseInstrumentMapping.commissionScript = purchaseInstrumentMapping.commissionScript
        return rmsPurchaseInstrumentMapping
    }
}
